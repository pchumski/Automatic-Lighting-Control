
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008728  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b74  08008b74  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b7c  08008b7c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08008b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001a0  08008d24  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08008d24  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001931a  00000000  00000000  000201ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003183  00000000  00000000  000394e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0003c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029530  00000000  00000000  0003e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ead  00000000  00000000  00067ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd897  00000000  00000000  0007fd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d60c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005318  00000000  00000000  0017d660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008910 	.word	0x08008910

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008910 	.word	0x08008910

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <BH1750_Init>:
 *  Created on: Nov 13, 2021
 *      Author: konst
 */
#include "bh1750.h"

void BH1750_Init(BH1750_HandleTypeDef* hbh1750, uint8_t command){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
uint8_t start = BH1750_POWER_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &start, 1, hbh1750->Timeout);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	b299      	uxth	r1, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f107 020f 	add.w	r2, r7, #15
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	f001 ffe3 	bl	80025d8 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1,hbh1750->Timeout);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	b299      	uxth	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	1cfa      	adds	r2, r7, #3
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	f001 ffd7 	bl	80025d8 <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	0000      	movs	r0, r0
 8000634:	0000      	movs	r0, r0
	...

08000638 <BH1750_ReadLux>:


float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750){
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
float light = 0;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
uint8_t buff[2];
HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, buff, 2, hbh1750->Timeout);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	b299      	uxth	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f107 0208 	add.w	r2, r7, #8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2302      	movs	r3, #2
 800065c:	f002 f8b0 	bl	80027c0 <HAL_I2C_Master_Receive>
light = ((buff[0] << 8) | buff[1]) / 1.2;
 8000660:	7a3b      	ldrb	r3, [r7, #8]
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	7a7a      	ldrb	r2, [r7, #9]
 8000666:	4313      	orrs	r3, r2
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000670:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000690 <BH1750_ReadLux+0x58>
 8000674:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000678:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800067c:	edc7 7a03 	vstr	s15, [r7, #12]
return light;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	ee07 3a90 	vmov	s15, r3
}
 8000686:	eeb0 0a67 	vmov.f32	s0, s15
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	33333333 	.word	0x33333333
 8000694:	3ff33333 	.word	0x3ff33333

08000698 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b8b      	ldr	r3, [pc, #556]	; (80008dc <MX_GPIO_Init+0x244>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a8a      	ldr	r2, [pc, #552]	; (80008dc <MX_GPIO_Init+0x244>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b88      	ldr	r3, [pc, #544]	; (80008dc <MX_GPIO_Init+0x244>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b85      	ldr	r3, [pc, #532]	; (80008dc <MX_GPIO_Init+0x244>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a84      	ldr	r2, [pc, #528]	; (80008dc <MX_GPIO_Init+0x244>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b82      	ldr	r3, [pc, #520]	; (80008dc <MX_GPIO_Init+0x244>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0320 	and.w	r3, r3, #32
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	4b7f      	ldr	r3, [pc, #508]	; (80008dc <MX_GPIO_Init+0x244>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a7e      	ldr	r2, [pc, #504]	; (80008dc <MX_GPIO_Init+0x244>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <MX_GPIO_Init+0x244>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b79      	ldr	r3, [pc, #484]	; (80008dc <MX_GPIO_Init+0x244>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a78      	ldr	r2, [pc, #480]	; (80008dc <MX_GPIO_Init+0x244>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b76      	ldr	r3, [pc, #472]	; (80008dc <MX_GPIO_Init+0x244>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b73      	ldr	r3, [pc, #460]	; (80008dc <MX_GPIO_Init+0x244>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a72      	ldr	r2, [pc, #456]	; (80008dc <MX_GPIO_Init+0x244>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b70      	ldr	r3, [pc, #448]	; (80008dc <MX_GPIO_Init+0x244>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	4b6d      	ldr	r3, [pc, #436]	; (80008dc <MX_GPIO_Init+0x244>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a6c      	ldr	r2, [pc, #432]	; (80008dc <MX_GPIO_Init+0x244>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b6a      	ldr	r3, [pc, #424]	; (80008dc <MX_GPIO_Init+0x244>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073e:	4b67      	ldr	r3, [pc, #412]	; (80008dc <MX_GPIO_Init+0x244>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a66      	ldr	r2, [pc, #408]	; (80008dc <MX_GPIO_Init+0x244>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b64      	ldr	r3, [pc, #400]	; (80008dc <MX_GPIO_Init+0x244>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f244 0181 	movw	r1, #16513	; 0x4081
 800075c:	4860      	ldr	r0, [pc, #384]	; (80008e0 <MX_GPIO_Init+0x248>)
 800075e:	f001 fe79 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	485f      	ldr	r0, [pc, #380]	; (80008e4 <MX_GPIO_Init+0x24c>)
 8000768:	f001 fe74 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4859      	ldr	r0, [pc, #356]	; (80008e8 <MX_GPIO_Init+0x250>)
 8000784:	f001 fcba 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000788:	2332      	movs	r3, #50	; 0x32
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000798:	230b      	movs	r3, #11
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4851      	ldr	r0, [pc, #324]	; (80008e8 <MX_GPIO_Init+0x250>)
 80007a4:	f001 fcaa 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 80007a8:	2308      	movs	r3, #8
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	484a      	ldr	r0, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x250>)
 80007be:	f001 fc9d 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c2:	2386      	movs	r3, #134	; 0x86
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4843      	ldr	r0, [pc, #268]	; (80008ec <MX_GPIO_Init+0x254>)
 80007de:	f001 fc8d 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4839      	ldr	r0, [pc, #228]	; (80008e0 <MX_GPIO_Init+0x248>)
 80007fc:	f001 fc7e 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4830      	ldr	r0, [pc, #192]	; (80008e0 <MX_GPIO_Init+0x248>)
 800081e:	f001 fc6d 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	482a      	ldr	r0, [pc, #168]	; (80008e4 <MX_GPIO_Init+0x24c>)
 800083a:	f001 fc5f 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4824      	ldr	r0, [pc, #144]	; (80008e4 <MX_GPIO_Init+0x24c>)
 8000852:	f001 fc53 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000856:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000868:	230a      	movs	r3, #10
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	481e      	ldr	r0, [pc, #120]	; (80008ec <MX_GPIO_Init+0x254>)
 8000874:	f001 fc42 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <MX_GPIO_Init+0x254>)
 800088e:	f001 fc35 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000892:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a4:	230b      	movs	r3, #11
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_GPIO_Init+0x24c>)
 80008b0:	f001 fc24 	bl	80020fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2009      	movs	r0, #9
 80008ba:	f001 fb48 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008be:	2009      	movs	r0, #9
 80008c0:	f001 fb61 	bl	8001f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2028      	movs	r0, #40	; 0x28
 80008ca:	f001 fb40 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ce:	2028      	movs	r0, #40	; 0x28
 80008d0:	f001 fb59 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020000 	.word	0x40020000

080008f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C1_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C1_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_I2C1_Init+0x74>)
 800092c:	f001 fdc4 	bl	80024b8 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fe11 	bl	800155c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C1_Init+0x74>)
 800093e:	f003 f821 	bl	8003984 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fe08 	bl	800155c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2C1_Init+0x74>)
 8000950:	f003 f863 	bl	8003a1a <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fdff 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001e8 	.word	0x200001e8
 8000968:	40005400 	.word	0x40005400
 800096c:	20404768 	.word	0x20404768

08000970 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_I2C2_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_I2C2_Init+0x74>)
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <MX_I2C2_Init+0x7c>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009ac:	f001 fd84 	bl	80024b8 <HAL_I2C_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b6:	f000 fdd1 	bl	800155c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009be:	f002 ffe1 	bl	8003984 <HAL_I2CEx_ConfigAnalogFilter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f000 fdc8 	bl	800155c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009d0:	f003 f823 	bl	8003a1a <HAL_I2CEx_ConfigDigitalFilter>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fdbf 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000234 	.word	0x20000234
 80009e8:	40005800 	.word	0x40005800
 80009ec:	20404768 	.word	0x20404768

080009f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a36      	ldr	r2, [pc, #216]	; (8000ae8 <HAL_I2C_MspInit+0xf8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d139      	bne.n	8000a86 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a35      	ldr	r2, [pc, #212]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	482a      	ldr	r0, [pc, #168]	; (8000af0 <HAL_I2C_MspInit+0x100>)
 8000a48:	f001 fb58 	bl	80020fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	201f      	movs	r0, #31
 8000a6a:	f001 fa70 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a6e:	201f      	movs	r0, #31
 8000a70:	f001 fa89 	bl	8001f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2020      	movs	r0, #32
 8000a7a:	f001 fa68 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a7e:	2020      	movs	r0, #32
 8000a80:	f001 fa81 	bl	8001f86 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a84:	e02c      	b.n	8000ae0 <HAL_I2C_MspInit+0xf0>
  else if(i2cHandle->Instance==I2C2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <HAL_I2C_MspInit+0x104>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d127      	bne.n	8000ae0 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <HAL_I2C_MspInit+0x108>)
 8000ac4:	f001 fb1a 	bl	80020fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_I2C_MspInit+0xfc>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40005800 	.word	0x40005800
 8000af8:	40021400 	.word	0x40021400

08000afc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f023 030f 	bic.w	r3, r3, #15
 8000b0c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	f043 030c 	orr.w	r3, r3, #12
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	f043 030c 	orr.w	r3, r3, #12
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *)data_t, 4, 100);
 8000b3c:	f107 0208 	add.w	r2, r7, #8
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2304      	movs	r3, #4
 8000b46:	214e      	movs	r1, #78	; 0x4e
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <lcd_send_cmd+0x5c>)
 8000b4a:	f001 fd45 	bl	80025d8 <HAL_I2C_Master_Transmit>

}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000234 	.word	0x20000234

08000b5c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f023 030f 	bic.w	r3, r3, #15
 8000b6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	f043 030d 	orr.w	r3, r3, #13
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	f043 0309 	orr.w	r3, r3, #9
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	f043 030d 	orr.w	r3, r3, #13
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	f043 0309 	orr.w	r3, r3, #9
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *)data_t, 4, 100);
 8000b9c:	f107 0208 	add.w	r2, r7, #8
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	214e      	movs	r1, #78	; 0x4e
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <lcd_send_data+0x5c>)
 8000baa:	f001 fd15 	bl	80025d8 <HAL_I2C_Master_Transmit>

}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000234 	.word	0x20000234

08000bbc <lcd_clear>:

void lcd_clear (void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000bc2:	2080      	movs	r0, #128	; 0x80
 8000bc4:	f7ff ff9a 	bl	8000afc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	e005      	b.n	8000bda <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000bce:	2020      	movs	r0, #32
 8000bd0:	f7ff ffc4 	bl	8000b5c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b45      	cmp	r3, #69	; 0x45
 8000bde:	ddf6      	ble.n	8000bce <lcd_clear+0x12>
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
    switch (row)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <lcd_put_cur+0x18>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <lcd_put_cur+0x22>
 8000c00:	e009      	b.n	8000c16 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	603b      	str	r3, [r7, #0]
            break;
 8000c0a:	e004      	b.n	8000c16 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c12:	603b      	str	r3, [r7, #0]
            break;
 8000c14:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff6e 	bl	8000afc <lcd_send_cmd>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <lcd_init>:


void lcd_init (void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c2c:	2032      	movs	r0, #50	; 0x32
 8000c2e:	f001 f88f 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c32:	2030      	movs	r0, #48	; 0x30
 8000c34:	f7ff ff62 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f001 f889 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c3e:	2030      	movs	r0, #48	; 0x30
 8000c40:	f7ff ff5c 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c44:	2001      	movs	r0, #1
 8000c46:	f001 f883 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c4a:	2030      	movs	r0, #48	; 0x30
 8000c4c:	f7ff ff56 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f001 f87d 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c56:	2020      	movs	r0, #32
 8000c58:	f7ff ff50 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(10);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f001 f877 	bl	8001d50 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c62:	2028      	movs	r0, #40	; 0x28
 8000c64:	f7ff ff4a 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f001 f871 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f7ff ff44 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f001 f86b 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff ff3e 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f001 f865 	bl	8001d50 <HAL_Delay>
	HAL_Delay(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f001 f862 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f7ff ff35 	bl	8000afc <lcd_send_cmd>
	HAL_Delay(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f001 f85c 	bl	8001d50 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c98:	200c      	movs	r0, #12
 8000c9a:	f7ff ff2f 	bl	8000afc <lcd_send_cmd>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000caa:	e006      	b.n	8000cba <lcd_send_string+0x18>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff51 	bl	8000b5c <lcd_send_data>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f4      	bne.n	8000cac <lcd_send_string+0xa>
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <send_message_to_lcd>:


void send_message_to_lcd(LCD_HandleTypeDef* mlcd,int index){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]


	if(index == 0)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d112      	bne.n	8000d02 <send_message_to_lcd+0x36>
	{
		lcd_put_cur(0,0);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff83 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->yref);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3314      	adds	r3, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffda 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(1,0);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff7a 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->y);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3328      	adds	r3, #40	; 0x28
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffd1 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(0,0);
		lcd_send_string(mlcd->Blue);
		lcd_put_cur(1,0);
		lcd_send_string(mlcd->yref);
	}
}
 8000d00:	e06a      	b.n	8000dd8 <send_message_to_lcd+0x10c>
	else if(index == 1)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d111      	bne.n	8000d2c <send_message_to_lcd+0x60>
		lcd_put_cur(0,0);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ff6d 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->y);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3328      	adds	r3, #40	; 0x28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ffc4 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(1,0);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff ff64 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->u);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffbc 	bl	8000ca2 <lcd_send_string>
}
 8000d2a:	e055      	b.n	8000dd8 <send_message_to_lcd+0x10c>
	else if(index == 2)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d111      	bne.n	8000d56 <send_message_to_lcd+0x8a>
		lcd_put_cur(0,0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ff58 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->u);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffb0 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(1,0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff ff50 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->Red);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	333c      	adds	r3, #60	; 0x3c
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ffa7 	bl	8000ca2 <lcd_send_string>
}
 8000d54:	e040      	b.n	8000dd8 <send_message_to_lcd+0x10c>
	else if(index == 3)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d112      	bne.n	8000d82 <send_message_to_lcd+0xb6>
		lcd_put_cur(0,0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff ff43 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->Red);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	333c      	adds	r3, #60	; 0x3c
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff9a 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(1,0);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ff3a 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->Green);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3350      	adds	r3, #80	; 0x50
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff91 	bl	8000ca2 <lcd_send_string>
}
 8000d80:	e02a      	b.n	8000dd8 <send_message_to_lcd+0x10c>
	else if(index == 4)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d112      	bne.n	8000dae <send_message_to_lcd+0xe2>
		lcd_put_cur(0,0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff ff2d 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->Green);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3350      	adds	r3, #80	; 0x50
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff84 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(1,0);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ff24 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->Blue);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3364      	adds	r3, #100	; 0x64
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff7b 	bl	8000ca2 <lcd_send_string>
}
 8000dac:	e014      	b.n	8000dd8 <send_message_to_lcd+0x10c>
	else if(index == 5)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d111      	bne.n	8000dd8 <send_message_to_lcd+0x10c>
		lcd_put_cur(0,0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff ff17 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->Blue);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3364      	adds	r3, #100	; 0x64
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff6e 	bl	8000ca2 <lcd_send_string>
		lcd_put_cur(1,0);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff ff0e 	bl	8000bea <lcd_put_cur>
		lcd_send_string(mlcd->yref);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff65 	bl	8000ca2 <lcd_send_string>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ColorsGenerator>:
 *      Author: Konstanty
 */
#include "led.h"


void ColorsGenerator(LED_HandleTypeDef* led, float rgb_duty){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	ed87 0a00 	vstr	s0, [r7]
	led->duty_B = rgb_duty*led->B;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	ed93 7a02 	vldr	s14, [r3, #8]
 8000df2:	edd7 7a00 	vldr	s15, [r7]
 8000df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	edc3 7a05 	vstr	s15, [r3, #20]
	led->duty_G = rgb_duty*led->G;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e06:	edd7 7a00 	vldr	s15, [r7]
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	edc3 7a04 	vstr	s15, [r3, #16]
	led->duty_R = rgb_duty*led->R;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	ed93 7a00 	vldr	s14, [r3]
 8000e1a:	edd7 7a00 	vldr	s15, [r7]
 8000e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	edc3 7a03 	vstr	s15, [r3, #12]
};
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_UART_RxCpltCallback>:

_Bool button_state;

// Odbieranie wiadomosci z aplikacji badz terminala
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a55      	ldr	r2, [pc, #340]	; (8000f98 <HAL_UART_RxCpltCallback+0x164>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	f040 80a4 	bne.w	8000f90 <HAL_UART_RxCpltCallback+0x15c>
	{

		if(wiadomosc[0] == 'K' && wiadomosc[1] == ':' && wiadomosc[2] == 'R' && wiadomosc[6] == 'G' && wiadomosc[10] == 'B' && wiadomosc[14] == ',' && wiadomosc[15] == 'Y' && wiadomosc[16] == ':' && wiadomosc[20] == ',' && wiadomosc[21] == 'O')
 8000e48:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b4b      	cmp	r3, #75	; 0x4b
 8000e4e:	f040 809a 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	2b3a      	cmp	r3, #58	; 0x3a
 8000e58:	f040 8095 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e5e:	789b      	ldrb	r3, [r3, #2]
 8000e60:	2b52      	cmp	r3, #82	; 0x52
 8000e62:	f040 8090 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e66:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e68:	799b      	ldrb	r3, [r3, #6]
 8000e6a:	2b47      	cmp	r3, #71	; 0x47
 8000e6c:	f040 808b 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e70:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e72:	7a9b      	ldrb	r3, [r3, #10]
 8000e74:	2b42      	cmp	r3, #66	; 0x42
 8000e76:	f040 8086 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e7a:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e7c:	7b9b      	ldrb	r3, [r3, #14]
 8000e7e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e80:	f040 8081 	bne.w	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e86:	7bdb      	ldrb	r3, [r3, #15]
 8000e88:	2b59      	cmp	r3, #89	; 0x59
 8000e8a:	d17c      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e8e:	7c1b      	ldrb	r3, [r3, #16]
 8000e90:	2b3a      	cmp	r3, #58	; 0x3a
 8000e92:	d178      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e94:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e96:	7d1b      	ldrb	r3, [r3, #20]
 8000e98:	2b2c      	cmp	r3, #44	; 0x2c
 8000e9a:	d174      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x152>
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000e9e:	7d5b      	ldrb	r3, [r3, #21]
 8000ea0:	2b4f      	cmp	r3, #79	; 0x4f
 8000ea2:	d170      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x152>
		{

			if(wiadomosc[22] == 'N')
 8000ea4:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000ea6:	7d9b      	ldrb	r3, [r3, #22]
 8000ea8:	2b4e      	cmp	r3, #78	; 0x4e
 8000eaa:	d159      	bne.n	8000f60 <HAL_UART_RxCpltCallback+0x12c>
			{
			sscanf(wiadomosc,"K:R%dG%dB%d,Y:%d,ON",&pulseR,&pulseG,&pulseB,&wartzad);
 8000eac:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <HAL_UART_RxCpltCallback+0x16c>)
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <HAL_UART_RxCpltCallback+0x170>)
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <HAL_UART_RxCpltCallback+0x174>)
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <HAL_UART_RxCpltCallback+0x178>)
 8000eb8:	493d      	ldr	r1, [pc, #244]	; (8000fb0 <HAL_UART_RxCpltCallback+0x17c>)
 8000eba:	4838      	ldr	r0, [pc, #224]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000ebc:	f006 fc56 	bl	800776c <siscanf>
			akcja = 1;
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <HAL_UART_RxCpltCallback+0x180>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
			if(pulseR >=0 && pulseR <=100)
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <HAL_UART_RxCpltCallback+0x178>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db10      	blt.n	8000ef0 <HAL_UART_RxCpltCallback+0xbc>
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_UART_RxCpltCallback+0x178>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	dc0c      	bgt.n	8000ef0 <HAL_UART_RxCpltCallback+0xbc>
			{
				led.R = (float)(pulseR/100.0f);
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HAL_UART_RxCpltCallback+0x178>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee2:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000fb8 <HAL_UART_RxCpltCallback+0x184>
 8000ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <HAL_UART_RxCpltCallback+0x188>)
 8000eec:	edc3 7a00 	vstr	s15, [r3]

			}
			if(pulseG >=0 && pulseG <=100)
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_UART_RxCpltCallback+0x174>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db10      	blt.n	8000f1a <HAL_UART_RxCpltCallback+0xe6>
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_UART_RxCpltCallback+0x174>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b64      	cmp	r3, #100	; 0x64
 8000efe:	dc0c      	bgt.n	8000f1a <HAL_UART_RxCpltCallback+0xe6>
			{
				led.G = (float)(pulseG/100.0f);
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <HAL_UART_RxCpltCallback+0x174>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000fb8 <HAL_UART_RxCpltCallback+0x184>
 8000f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_UART_RxCpltCallback+0x188>)
 8000f16:	edc3 7a01 	vstr	s15, [r3, #4]

			}
			if(pulseB >=0 && pulseB <=100)
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_UART_RxCpltCallback+0x170>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db10      	blt.n	8000f44 <HAL_UART_RxCpltCallback+0x110>
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_UART_RxCpltCallback+0x170>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	dc0c      	bgt.n	8000f44 <HAL_UART_RxCpltCallback+0x110>
			{
				led.B = (float)(pulseB/100.0f);
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_UART_RxCpltCallback+0x170>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000fb8 <HAL_UART_RxCpltCallback+0x184>
 8000f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_UART_RxCpltCallback+0x188>)
 8000f40:	edc3 7a02 	vstr	s15, [r3, #8]

			}
			wartosc_zadana = (float)(wartzad*1.0f);
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_UART_RxCpltCallback+0x16c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_UART_RxCpltCallback+0x18c>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]


			lcd_yr = wartzad;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_UART_RxCpltCallback+0x16c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_UART_RxCpltCallback+0x190>)
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e012      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x152>

			}
			else if(wiadomosc[22] == 'F')
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000f62:	7d9b      	ldrb	r3, [r3, #22]
 8000f64:	2b46      	cmp	r3, #70	; 0x46
 8000f66:	d103      	bne.n	8000f70 <HAL_UART_RxCpltCallback+0x13c>
			{
				akcja = 0;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_UART_RxCpltCallback+0x180>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e00a      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x152>

			}
			else
			{
				HAL_UART_Transmit(huart, (uint8_t*)errors, strlen(errors), 1000);
 8000f70:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <HAL_UART_RxCpltCallback+0x194>)
 8000f72:	f7ff f965 	bl	8000240 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <HAL_UART_RxCpltCallback+0x194>)
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f005 f8d9 	bl	8006138 <HAL_UART_Transmit>
			}
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
 8000f86:	2217      	movs	r2, #23
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <HAL_UART_RxCpltCallback+0x168>)
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_UART_RxCpltCallback+0x198>)
 8000f8c:	f005 f967 	bl	800625e <HAL_UART_Receive_IT>

	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	200002a8 	.word	0x200002a8
 8000fa0:	200001c0 	.word	0x200001c0
 8000fa4:	200001d0 	.word	0x200001d0
 8000fa8:	200001cc 	.word	0x200001cc
 8000fac:	200001c8 	.word	0x200001c8
 8000fb0:	08008928 	.word	0x08008928
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	42c80000 	.word	0x42c80000
 8000fbc:	20000038 	.word	0x20000038
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	200001d4 	.word	0x200001d4
 8000fc8:	200000f8 	.word	0x200000f8
 8000fcc:	20000364 	.word	0x20000364

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	f040 80b6 	bne.w	8001150 <HAL_TIM_PeriodElapsedCallback+0x180>
	{
		// Zczytywanie danych z czujnika
		LightIntensity = BH1750_ReadLux(&hbh1750_1);
 8000fe4:	485c      	ldr	r0, [pc, #368]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fe6:	f7ff fb27 	bl	8000638 <BH1750_ReadLux>
 8000fea:	eef0 7a40 	vmov.f32	s15, s0
 8000fee:	4b5b      	ldr	r3, [pc, #364]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
		light = LightIntensity*100;
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001160 <HAL_TIM_PeriodElapsedCallback+0x190>
 8000ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 2a90 	vmov	r2, s15
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800100c:	601a      	str	r2, [r3, #0]
		lcd_light = LightIntensity*100;
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001160 <HAL_TIM_PeriodElapsedCallback+0x190>
 8001018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001020:	ee17 2a90 	vmov	r2, s15
 8001024:	4b50      	ldr	r3, [pc, #320]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001026:	601a      	str	r2, [r3, #0]
		u_dutyi = duty*100;
 8001028:	4b50      	ldr	r3, [pc, #320]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001160 <HAL_TIM_PeriodElapsedCallback+0x190>
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103a:	ee17 2a90 	vmov	r2, s15
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001040:	601a      	str	r2, [r3, #0]

		if(akcja == START)
 8001042:	4b4c      	ldr	r3, [pc, #304]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d144      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x104>
		{
//		sprintf(komunikat,"%d.%d\r\n",light/100,light%100);
//		HAL_UART_Transmit(&huart3, komunikat, strlen(komunikat), 150);

		// Obliczanie sygnalu sterujacego
		duty = Reg_SignalControl(&reg_I, wartosc_zadana, LightIntensity);
 800104a:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	4b42      	ldr	r3, [pc, #264]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	eef0 0a47 	vmov.f32	s1, s14
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	4847      	ldr	r0, [pc, #284]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001060:	f000 fa82 	bl	8001568 <Reg_SignalControl>
 8001064:	eef0 7a40 	vmov.f32	s15, s0
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800106a:	edc3 7a00 	vstr	s15, [r3]
		ColorsGenerator(&led, duty);
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	4841      	ldr	r0, [pc, #260]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800107a:	f7ff feb1 	bl	8000de0 <ColorsGenerator>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)((led.duty_R)*10));
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001080:	edd3 7a03 	vldr	s15, [r3, #12]
 8001084:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001094:	ee17 2a90 	vmov	r2, s15
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)((led.duty_G)*10));
 800109a:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800109c:	edd3 7a04 	vldr	s15, [r3, #16]
 80010a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b0:	ee17 2a90 	vmov	r2, s15
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80010bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	ee17 2a90 	vmov	r2, s15
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));

		}
	}

}
 80010d2:	e03d      	b.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x180>
		else if(akcja == STOP)
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d139      	bne.n	8001150 <HAL_TIM_PeriodElapsedCallback+0x180>
			led.duty_R = 0.0f;
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
			led.duty_G = 0.0f;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
			led.duty_B = 0.0f;
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
			duty = 0.0f;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)((led.duty_R)*10));
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001102:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001112:	ee17 2a90 	vmov	r2, s15
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)((led.duty_G)*10));
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800111a:	edd3 7a04 	vldr	s15, [r3, #16]
 800111e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112e:	ee17 2a90 	vmov	r2, s15
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001136:	edd3 7a05 	vldr	s15, [r3, #20]
 800113a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114a:	ee17 2a90 	vmov	r2, s15
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008
 800115c:	200000f0 	.word	0x200000f0
 8001160:	42c80000 	.word	0x42c80000
 8001164:	200000f4 	.word	0x200000f4
 8001168:	2000012c 	.word	0x2000012c
 800116c:	200001bc 	.word	0x200001bc
 8001170:	200001c4 	.word	0x200001c4
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004
 800117c:	20000014 	.word	0x20000014
 8001180:	20000038 	.word	0x20000038
 8001184:	200002cc 	.word	0x200002cc

08001188 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
	// Wysylanie wiadomosci na lcd (aktualnych z listy)
  if(GPIO_Pin == USER_Btn_Pin)
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001198:	d15d      	bne.n	8001256 <HAL_GPIO_EXTI_Callback+0xce>
  {
	  sprintf(moj_lcd.y,"Y=%d.%d[lux]",lcd_light/100,lcd_light%100);
 800119a:	4b69      	ldr	r3, [pc, #420]	; (8001340 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a69      	ldr	r2, [pc, #420]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011a0:	fb82 1203 	smull	r1, r2, r2, r3
 80011a4:	1152      	asrs	r2, r2, #5
 80011a6:	17db      	asrs	r3, r3, #31
 80011a8:	1ad0      	subs	r0, r2, r3
 80011aa:	4b65      	ldr	r3, [pc, #404]	; (8001340 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a65      	ldr	r2, [pc, #404]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011b0:	fb82 1203 	smull	r1, r2, r2, r3
 80011b4:	1151      	asrs	r1, r2, #5
 80011b6:	17da      	asrs	r2, r3, #31
 80011b8:	1a8a      	subs	r2, r1, r2
 80011ba:	2164      	movs	r1, #100	; 0x64
 80011bc:	fb01 f202 	mul.w	r2, r1, r2
 80011c0:	1a9a      	subs	r2, r3, r2
 80011c2:	4613      	mov	r3, r2
 80011c4:	4602      	mov	r2, r0
 80011c6:	4960      	ldr	r1, [pc, #384]	; (8001348 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80011c8:	4860      	ldr	r0, [pc, #384]	; (800134c <HAL_GPIO_EXTI_Callback+0x1c4>)
 80011ca:	f006 faaf 	bl	800772c <siprintf>
	  sprintf(moj_lcd.yref,"Yref=%d[lux]",lcd_yr);
 80011ce:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	495f      	ldr	r1, [pc, #380]	; (8001354 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80011d6:	4860      	ldr	r0, [pc, #384]	; (8001358 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80011d8:	f006 faa8 	bl	800772c <siprintf>
	  sprintf(moj_lcd.u,"u=%d.%d[lux]",u_dutyi/100,u_dutyi%100);
 80011dc:	4b5f      	ldr	r3, [pc, #380]	; (800135c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011e2:	fb82 1203 	smull	r1, r2, r2, r3
 80011e6:	1152      	asrs	r2, r2, #5
 80011e8:	17db      	asrs	r3, r3, #31
 80011ea:	1ad0      	subs	r0, r2, r3
 80011ec:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a54      	ldr	r2, [pc, #336]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	1151      	asrs	r1, r2, #5
 80011f8:	17da      	asrs	r2, r3, #31
 80011fa:	1a8a      	subs	r2, r1, r2
 80011fc:	2164      	movs	r1, #100	; 0x64
 80011fe:	fb01 f202 	mul.w	r2, r1, r2
 8001202:	1a9a      	subs	r2, r3, r2
 8001204:	4613      	mov	r3, r2
 8001206:	4602      	mov	r2, r0
 8001208:	4955      	ldr	r1, [pc, #340]	; (8001360 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800120a:	4856      	ldr	r0, [pc, #344]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800120c:	f006 fa8e 	bl	800772c <siprintf>
	  sprintf(moj_lcd.Red,"RED=%d[%]",pulseR);
 8001210:	4b55      	ldr	r3, [pc, #340]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4955      	ldr	r1, [pc, #340]	; (800136c <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001218:	4855      	ldr	r0, [pc, #340]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800121a:	f006 fa87 	bl	800772c <siprintf>
	  sprintf(moj_lcd.Green,"GREEN=%d[%]",pulseG);
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4954      	ldr	r1, [pc, #336]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001226:	4855      	ldr	r0, [pc, #340]	; (800137c <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001228:	f006 fa80 	bl	800772c <siprintf>
	  sprintf(moj_lcd.Blue,"BLUE=%d[%]",pulseB);
 800122c:	4b54      	ldr	r3, [pc, #336]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4954      	ldr	r1, [pc, #336]	; (8001384 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001234:	4854      	ldr	r0, [pc, #336]	; (8001388 <HAL_GPIO_EXTI_Callback+0x200>)
 8001236:	f006 fa79 	bl	800772c <siprintf>
	  lcd_clear();
 800123a:	f7ff fcbf 	bl	8000bbc <lcd_clear>
	  send_message_to_lcd(&moj_lcd, lcd_index);
 800123e:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	4847      	ldr	r0, [pc, #284]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001246:	f7ff fd41 	bl	8000ccc <send_message_to_lcd>
	  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
 800124a:	2217      	movs	r2, #23
 800124c:	4950      	ldr	r1, [pc, #320]	; (8001390 <HAL_GPIO_EXTI_Callback+0x208>)
 800124e:	4851      	ldr	r0, [pc, #324]	; (8001394 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001250:	f005 f805 	bl	800625e <HAL_UART_Receive_IT>
	  sprintf(moj_lcd.Blue,"BLUE=%d[%]",pulseB);
	  lcd_clear();
	  send_message_to_lcd(&moj_lcd, lcd_index);
	  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
  }
}
 8001254:	e070      	b.n	8001338 <HAL_GPIO_EXTI_Callback+0x1b0>
  else if(GPIO_Pin == button_Pin) // Interiwanie po liscie wartosci wysiwetlanych na lcd
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2b08      	cmp	r3, #8
 800125a:	d16d      	bne.n	8001338 <HAL_GPIO_EXTI_Callback+0x1b0>
	  if(lcd_index >=0 && lcd_index < 5)
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db09      	blt.n	8001278 <HAL_GPIO_EXTI_Callback+0xf0>
 8001264:	4b49      	ldr	r3, [pc, #292]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b04      	cmp	r3, #4
 800126a:	dc05      	bgt.n	8001278 <HAL_GPIO_EXTI_Callback+0xf0>
		  lcd_index++;
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a46      	ldr	r2, [pc, #280]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e002      	b.n	800127e <HAL_GPIO_EXTI_Callback+0xf6>
		  lcd_index = 0;
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
	  sprintf(moj_lcd.y,"Y=%d.%d[lux]",lcd_light/100,lcd_light%100);
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a30      	ldr	r2, [pc, #192]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001284:	fb82 1203 	smull	r1, r2, r2, r3
 8001288:	1152      	asrs	r2, r2, #5
 800128a:	17db      	asrs	r3, r3, #31
 800128c:	1ad0      	subs	r0, r2, r3
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2c      	ldr	r2, [pc, #176]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001294:	fb82 1203 	smull	r1, r2, r2, r3
 8001298:	1151      	asrs	r1, r2, #5
 800129a:	17da      	asrs	r2, r3, #31
 800129c:	1a8a      	subs	r2, r1, r2
 800129e:	2164      	movs	r1, #100	; 0x64
 80012a0:	fb01 f202 	mul.w	r2, r1, r2
 80012a4:	1a9a      	subs	r2, r3, r2
 80012a6:	4613      	mov	r3, r2
 80012a8:	4602      	mov	r2, r0
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80012ac:	4827      	ldr	r0, [pc, #156]	; (800134c <HAL_GPIO_EXTI_Callback+0x1c4>)
 80012ae:	f006 fa3d 	bl	800772c <siprintf>
	  sprintf(moj_lcd.yref,"Yref=%d[lux]",lcd_yr);
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4926      	ldr	r1, [pc, #152]	; (8001354 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80012ba:	4827      	ldr	r0, [pc, #156]	; (8001358 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80012bc:	f006 fa36 	bl	800772c <siprintf>
	  sprintf(moj_lcd.u,"u=%d.%d[lux]",u_dutyi/100,u_dutyi%100);
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012c6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ca:	1152      	asrs	r2, r2, #5
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad0      	subs	r0, r2, r3
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1151      	asrs	r1, r2, #5
 80012dc:	17da      	asrs	r2, r3, #31
 80012de:	1a8a      	subs	r2, r1, r2
 80012e0:	2164      	movs	r1, #100	; 0x64
 80012e2:	fb01 f202 	mul.w	r2, r1, r2
 80012e6:	1a9a      	subs	r2, r3, r2
 80012e8:	4613      	mov	r3, r2
 80012ea:	4602      	mov	r2, r0
 80012ec:	491c      	ldr	r1, [pc, #112]	; (8001360 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80012f0:	f006 fa1c 	bl	800772c <siprintf>
	  sprintf(moj_lcd.Red,"RED=%d[%]",pulseR);
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	491c      	ldr	r1, [pc, #112]	; (800136c <HAL_GPIO_EXTI_Callback+0x1e4>)
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80012fe:	f006 fa15 	bl	800772c <siprintf>
	  sprintf(moj_lcd.Green,"GREEN=%d[%]",pulseG);
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	491b      	ldr	r1, [pc, #108]	; (8001378 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800130a:	481c      	ldr	r0, [pc, #112]	; (800137c <HAL_GPIO_EXTI_Callback+0x1f4>)
 800130c:	f006 fa0e 	bl	800772c <siprintf>
	  sprintf(moj_lcd.Blue,"BLUE=%d[%]",pulseB);
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	491b      	ldr	r1, [pc, #108]	; (8001384 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001318:	481b      	ldr	r0, [pc, #108]	; (8001388 <HAL_GPIO_EXTI_Callback+0x200>)
 800131a:	f006 fa07 	bl	800772c <siprintf>
	  lcd_clear();
 800131e:	f7ff fc4d 	bl	8000bbc <lcd_clear>
	  send_message_to_lcd(&moj_lcd, lcd_index);
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_GPIO_EXTI_Callback+0x204>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800132a:	f7ff fccf 	bl	8000ccc <send_message_to_lcd>
	  HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
 800132e:	2217      	movs	r2, #23
 8001330:	4917      	ldr	r1, [pc, #92]	; (8001390 <HAL_GPIO_EXTI_Callback+0x208>)
 8001332:	4818      	ldr	r0, [pc, #96]	; (8001394 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001334:	f004 ff93 	bl	800625e <HAL_UART_Receive_IT>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000012c 	.word	0x2000012c
 8001344:	51eb851f 	.word	0x51eb851f
 8001348:	0800893c 	.word	0x0800893c
 800134c:	20000078 	.word	0x20000078
 8001350:	200001d4 	.word	0x200001d4
 8001354:	0800894c 	.word	0x0800894c
 8001358:	20000064 	.word	0x20000064
 800135c:	200001c4 	.word	0x200001c4
 8001360:	0800895c 	.word	0x0800895c
 8001364:	20000050 	.word	0x20000050
 8001368:	200001c8 	.word	0x200001c8
 800136c:	0800896c 	.word	0x0800896c
 8001370:	2000008c 	.word	0x2000008c
 8001374:	200001cc 	.word	0x200001cc
 8001378:	08008978 	.word	0x08008978
 800137c:	200000a0 	.word	0x200000a0
 8001380:	200001d0 	.word	0x200001d0
 8001384:	08008984 	.word	0x08008984
 8001388:	200000b4 	.word	0x200000b4
 800138c:	200001d8 	.word	0x200001d8
 8001390:	200002a8 	.word	0x200002a8
 8001394:	20000364 	.word	0x20000364

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f000 fc7a 	bl	8001c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f843 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f7ff f977 	bl	8000698 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013aa:	f000 fbcf 	bl	8001b4c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80013ae:	f000 faa9 	bl	8001904 <MX_TIM3_Init>
  MX_TIM2_Init();
 80013b2:	f000 fa59 	bl	8001868 <MX_TIM2_Init>
  MX_I2C1_Init();
 80013b6:	f7ff fa9b 	bl	80008f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013ba:	f7ff fad9 	bl	8000970 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


   // Inicjalizacja czujnika cyfrowego
   uint8_t TrybPracy = BH1750_CONTINOUS_H_RES_MODE;
 80013be:	2310      	movs	r3, #16
 80013c0:	71fb      	strb	r3, [r7, #7]
   BH1750_Init(&hbh1750_1, TrybPracy);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4812      	ldr	r0, [pc, #72]	; (8001410 <main+0x78>)
 80013c8:	f7ff f90e 	bl	80005e8 <BH1750_Init>

   // Wystartowanie zegarow
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80013cc:	2100      	movs	r1, #0
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <main+0x7c>)
 80013d0:	f003 fdda 	bl	8004f88 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80013d4:	2104      	movs	r1, #4
 80013d6:	480f      	ldr	r0, [pc, #60]	; (8001414 <main+0x7c>)
 80013d8:	f003 fdd6 	bl	8004f88 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80013dc:	2108      	movs	r1, #8
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <main+0x7c>)
 80013e0:	f003 fdd2 	bl	8004f88 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start_IT(&htim2);
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <main+0x80>)
 80013e6:	f003 fcf5 	bl	8004dd4 <HAL_TIM_Base_Start_IT>

   // Oczekiwanie na komende UART
   HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
 80013ea:	2217      	movs	r2, #23
 80013ec:	490b      	ldr	r1, [pc, #44]	; (800141c <main+0x84>)
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <main+0x88>)
 80013f0:	f004 ff35 	bl	800625e <HAL_UART_Receive_IT>

   //Inicjalizacja LCD
   lcd_init();
 80013f4:	f7ff fc18 	bl	8000c28 <lcd_init>
   lcd_send_string("Witamy");
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <main+0x8c>)
 80013fa:	f7ff fc52 	bl	8000ca2 <lcd_send_string>
   lcd_put_cur(1, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fbf2 	bl	8000bea <lcd_put_cur>
   lcd_send_string("LED RGB");
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <main+0x90>)
 8001408:	f7ff fc4b 	bl	8000ca2 <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140c:	e7fe      	b.n	800140c <main+0x74>
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	200002cc 	.word	0x200002cc
 8001418:	20000318 	.word	0x20000318
 800141c:	200002a8 	.word	0x200002a8
 8001420:	20000364 	.word	0x20000364
 8001424:	08008990 	.word	0x08008990
 8001428:	08008998 	.word	0x08008998

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0b8      	sub	sp, #224	; 0xe0
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001436:	2234      	movs	r2, #52	; 0x34
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f006 f96e 	bl	800771c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	2290      	movs	r2, #144	; 0x90
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f006 f95f 	bl	800771c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800145e:	f002 fb29 	bl	8003ab4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <SystemClock_Config+0x128>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a3b      	ldr	r2, [pc, #236]	; (8001554 <SystemClock_Config+0x128>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <SystemClock_Config+0x128>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <SystemClock_Config+0x12c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a36      	ldr	r2, [pc, #216]	; (8001558 <SystemClock_Config+0x12c>)
 8001480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <SystemClock_Config+0x12c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001492:	2301      	movs	r3, #1
 8001494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001498:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800149c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ae:	2304      	movs	r3, #4
 80014b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014b4:	23d8      	movs	r3, #216	; 0xd8
 80014b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fb4f 	bl	8003b74 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014dc:	f000 f83e 	bl	800155c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014e0:	f002 faf8 	bl	8003ad4 <HAL_PWREx_EnableOverDrive>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ea:	f000 f837 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001510:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001514:	2107      	movs	r1, #7
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fdda 	bl	80040d0 <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001522:	f000 f81b 	bl	800155c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001526:	f44f 4341 	mov.w	r3, #49408	; 0xc100
 800152a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4618      	mov	r0, r3
 800153e:	f002 ffc9 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001548:	f000 f808 	bl	800155c <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	37e0      	adds	r7, #224	; 0xe0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <Reg_SignalControl>:
 *      Author: Konstanty
 */
#include "regulator.h"

float Reg_SignalControl(regulator_Handle_TypeDef* Reg,float y_ref, float pomiar)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	ed87 0a02 	vstr	s0, [r7, #8]
 8001574:	edc7 0a01 	vstr	s1, [r7, #4]
	float e;
	float u;
	float u_sat;
	float N=0.01f;
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <Reg_SignalControl+0x14c>)
 800157a:	61bb      	str	r3, [r7, #24]
	e = y_ref - pomiar;
 800157c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001580:	edd7 7a01 	vldr	s15, [r7, #4]
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	edc7 7a05 	vstr	s15, [r7, #20]
			Reg->e_int += Reg->Ki*Reg->Ts*e;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	edd3 6a00 	vldr	s13, [r3]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	edd3 7a03 	vldr	s15, [r3, #12]
 800159e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	edc3 7a04 	vstr	s15, [r3, #16]
			Reg->e_der = (Reg->Kd*N)*(e-Reg->e_prev) + (1.0f - N*Reg->Ts)*Reg->e_der;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80015be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80015c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80015cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80015da:	edd7 7a06 	vldr	s15, [r7, #24]
 80015de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80015f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	edc3 7a05 	vstr	s15, [r3, #20]
			Reg->e_prev = e;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	619a      	str	r2, [r3, #24]

			u = Reg->e_int + Reg->e_der + (Reg->Kp*e);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ed93 7a04 	vldr	s14, [r3, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	edd3 6a02 	vldr	s13, [r3, #8]
 800161a:	edd7 7a05 	vldr	s15, [r7, #20]
 800161e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	edc7 7a04 	vstr	s15, [r7, #16]

			if(u > Reg->limitup)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001630:	ed97 7a04 	vldr	s14, [r7, #16]
 8001634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	dd03      	ble.n	8001646 <Reg_SignalControl+0xde>
			{
			  u_sat = Reg->limitup;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	e00f      	b.n	8001666 <Reg_SignalControl+0xfe>
			}
			else if(u < Reg->limitdown)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	edd3 7a07 	vldr	s15, [r3, #28]
 800164c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	d503      	bpl.n	8001662 <Reg_SignalControl+0xfa>
			{
			  u_sat = Reg->limitdown;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	e001      	b.n	8001666 <Reg_SignalControl+0xfe>
			}
			else
			{
			  u_sat = u;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	61fb      	str	r3, [r7, #28]
			}

			if(u!=u_sat)
 8001666:	ed97 7a04 	vldr	s14, [r7, #16]
 800166a:	edd7 7a07 	vldr	s15, [r7, #28]
 800166e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d013      	beq.n	80016a0 <Reg_SignalControl+0x138>
			{
			  Reg->e_int -=Reg->Ki*Reg->Ts*e;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	ed93 7a04 	vldr	s14, [r3, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	edd3 6a00 	vldr	s13, [r3]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	edd3 7a03 	vldr	s15, [r3, #12]
 800168a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800168e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edc3 7a04 	vstr	s15, [r3, #16]
			}
	return u_sat;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	ee07 3a90 	vmov	s15, r3
};
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	3c23d70a 	.word	0x3c23d70a

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x44>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_MspInit+0x44>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x44>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x44>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x44>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 fae0 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001758:	2008      	movs	r0, #8
 800175a:	f000 fe95 	bl	8002488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM2_IRQHandler+0x10>)
 800176a:	f003 fd07 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000318 	.word	0x20000318

08001778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM3_IRQHandler+0x10>)
 800177e:	f003 fcfd 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002cc 	.word	0x200002cc

0800178c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <I2C1_EV_IRQHandler+0x10>)
 8001792:	f001 f90b 	bl	80029ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001e8 	.word	0x200001e8

080017a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <I2C1_ER_IRQHandler+0x10>)
 80017a6:	f001 f91b 	bl	80029e0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200001e8 	.word	0x200001e8

080017b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <USART3_IRQHandler+0x10>)
 80017ba:	f004 fd9f 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000364 	.word	0x20000364

080017c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017d0:	f000 fe5a 	bl	8002488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f005 ff5e 	bl	80076c8 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20080000 	.word	0x20080000
 8001838:	00000400 	.word	0x00000400
 800183c:	200001dc 	.word	0x200001dc
 8001840:	20000400 	.word	0x20000400

08001844 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM2_Init+0x94>)
 8001888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_TIM2_Init+0x94>)
 8001890:	226b      	movs	r2, #107	; 0x6b
 8001892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_TIM2_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 129869;
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_TIM2_Init+0x94>)
 800189c:	4a18      	ldr	r2, [pc, #96]	; (8001900 <MX_TIM2_Init+0x98>)
 800189e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_TIM2_Init+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM2_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM2_Init+0x94>)
 80018ae:	f003 fa39 	bl	8004d24 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b8:	f7ff fe50 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_TIM2_Init+0x94>)
 80018ca:	f003 fe8b 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018d4:	f7ff fe42 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_TIM2_Init+0x94>)
 80018e6:	f004 fb2d 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018f0:	f7ff fe34 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000318 	.word	0x20000318
 8001900:	0001fb4d 	.word	0x0001fb4d

08001904 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <MX_TIM3_Init+0x114>)
 8001938:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <MX_TIM3_Init+0x118>)
 800193a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_TIM3_Init+0x114>)
 800193e:	226b      	movs	r2, #107	; 0x6b
 8001940:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <MX_TIM3_Init+0x114>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <MX_TIM3_Init+0x114>)
 800194a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800194e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_TIM3_Init+0x114>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <MX_TIM3_Init+0x114>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800195c:	482e      	ldr	r0, [pc, #184]	; (8001a18 <MX_TIM3_Init+0x114>)
 800195e:	f003 f9e1 	bl	8004d24 <HAL_TIM_Base_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001968:	f7ff fdf8 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001976:	4619      	mov	r1, r3
 8001978:	4827      	ldr	r0, [pc, #156]	; (8001a18 <MX_TIM3_Init+0x114>)
 800197a:	f003 fe33 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001984:	f7ff fdea 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001988:	4823      	ldr	r0, [pc, #140]	; (8001a18 <MX_TIM3_Init+0x114>)
 800198a:	f003 fa9b 	bl	8004ec4 <HAL_TIM_PWM_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001994:	f7ff fde2 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	481c      	ldr	r0, [pc, #112]	; (8001a18 <MX_TIM3_Init+0x114>)
 80019a8:	f004 facc 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019b2:	f7ff fdd3 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b6:	2360      	movs	r3, #96	; 0x60
 80019b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <MX_TIM3_Init+0x114>)
 80019ce:	f003 fcf5 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019d8:	f7ff fdc0 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	2204      	movs	r2, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_TIM3_Init+0x114>)
 80019e4:	f003 fcea 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019ee:	f7ff fdb5 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	2208      	movs	r2, #8
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM3_Init+0x114>)
 80019fa:	f003 fcdf 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001a04:	f7ff fdaa 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM3_Init+0x114>)
 8001a0a:	f000 f849 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	; 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002cc 	.word	0x200002cc
 8001a1c:	40000400 	.word	0x40000400

08001a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a30:	d114      	bne.n	8001a5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f000 fa7d 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a54:	201c      	movs	r0, #28
 8001a56:	f000 fa96 	bl	8001f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a5a:	e018      	b.n	8001a8e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <HAL_TIM_Base_MspInit+0x7c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	201d      	movs	r0, #29
 8001a84:	f000 fa63 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a88:	201d      	movs	r0, #29
 8001a8a:	f000 fa7c 	bl	8001f86 <HAL_NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_TIM_MspPostInit+0x9c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d138      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_TIM_MspPostInit+0xa0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_TIM_MspPostInit+0xa0>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_TIM_MspPostInit+0xa0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_TIM_MspPostInit+0xa0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <HAL_TIM_MspPostInit+0xa0>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_TIM_MspPostInit+0xa0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b02:	2302      	movs	r3, #2
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <HAL_TIM_MspPostInit+0xa4>)
 8001b0e:	f000 faf5 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b24:	2302      	movs	r3, #2
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <HAL_TIM_MspPostInit+0xa8>)
 8001b30:	f000 fae4 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020800 	.word	0x40020800

08001b4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <MX_USART3_UART_Init+0x5c>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART3_UART_Init+0x58>)
 8001b90:	f004 fa84 	bl	800609c <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f7ff fcdf 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000364 	.word	0x20000364
 8001ba8:	40004800 	.word	0x40004800

08001bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_UART_MspInit+0x8c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d130      	bne.n	8001c30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_UART_MspInit+0x90>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_UART_MspInit+0x90>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_UART_MspInit+0x90>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_UART_MspInit+0x90>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_UART_MspInit+0x90>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_UART_MspInit+0x90>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c10:	2307      	movs	r3, #7
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <HAL_UART_MspInit+0x94>)
 8001c1c:	f000 fa6e 	bl	80020fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2027      	movs	r0, #39	; 0x27
 8001c26:	f000 f992 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c2a:	2027      	movs	r0, #39	; 0x27
 8001c2c:	f000 f9ab 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40004800 	.word	0x40004800
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020c00 	.word	0x40020c00

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c48:	480d      	ldr	r0, [pc, #52]	; (8001c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c4a:	490e      	ldr	r1, [pc, #56]	; (8001c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c4c:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c60:	4c0b      	ldr	r4, [pc, #44]	; (8001c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c6e:	f7ff fde9 	bl	8001844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c72:	f005 fd2f 	bl	80076d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff fb8f 	bl	8001398 <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001c88:	08008b84 	.word	0x08008b84
  ldr r2, =_sbss
 8001c8c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001c90:	200003fc 	.word	0x200003fc

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>

08001c96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f000 f94c 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 f805 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca6:	f7ff fd07 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x54>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x58>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f967 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f92f 	bl	8001f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x5c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000130 	.word	0x20000130
 8001d08:	20000138 	.word	0x20000138
 8001d0c:	20000134 	.word	0x20000134

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000138 	.word	0x20000138
 8001d34:	200003e8 	.word	0x200003e8

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200003e8 	.word	0x200003e8

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000138 	.word	0x20000138

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	05fa0000 	.word	0x05fa0000

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff29 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff3e 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff31 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa2 	bl	8001ef4 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff feb6 	bl	8001d38 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d008      	beq.n	8001fec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e052      	b.n	8002092 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0216 	bic.w	r2, r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800200a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d103      	bne.n	800201c <HAL_DMA_Abort+0x62>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0208 	bic.w	r2, r2, #8
 800202a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203c:	e013      	b.n	8002066 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203e:	f7ff fe7b 	bl	8001d38 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b05      	cmp	r3, #5
 800204a:	d90c      	bls.n	8002066 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e015      	b.n	8002092 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e4      	bne.n	800203e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d004      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e00c      	b.n	80020d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2205      	movs	r2, #5
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e175      	b.n	8002408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8164 	bne.w	8002402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d005      	beq.n	8002152 <HAL_GPIO_Init+0x56>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d130      	bne.n	80021b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 0201 	and.w	r2, r3, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d017      	beq.n	80021f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d123      	bne.n	8002244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80be 	beq.w	8002402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_GPIO_Init+0x324>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_GPIO_Init+0x324>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_GPIO_Init+0x324>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800229e:	4a61      	ldr	r2, [pc, #388]	; (8002424 <HAL_GPIO_Init+0x328>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a58      	ldr	r2, [pc, #352]	; (8002428 <HAL_GPIO_Init+0x32c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d037      	beq.n	800233a <HAL_GPIO_Init+0x23e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a57      	ldr	r2, [pc, #348]	; (800242c <HAL_GPIO_Init+0x330>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d031      	beq.n	8002336 <HAL_GPIO_Init+0x23a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a56      	ldr	r2, [pc, #344]	; (8002430 <HAL_GPIO_Init+0x334>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <HAL_GPIO_Init+0x236>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a55      	ldr	r2, [pc, #340]	; (8002434 <HAL_GPIO_Init+0x338>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x232>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a54      	ldr	r2, [pc, #336]	; (8002438 <HAL_GPIO_Init+0x33c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x22e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a53      	ldr	r2, [pc, #332]	; (800243c <HAL_GPIO_Init+0x340>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x22a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_GPIO_Init+0x344>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_Init+0x348>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_GPIO_Init+0x34c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_Init+0x350>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x21a>
 8002312:	2309      	movs	r3, #9
 8002314:	e012      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002316:	230a      	movs	r3, #10
 8002318:	e010      	b.n	800233c <HAL_GPIO_Init+0x240>
 800231a:	2308      	movs	r3, #8
 800231c:	e00e      	b.n	800233c <HAL_GPIO_Init+0x240>
 800231e:	2307      	movs	r3, #7
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002322:	2306      	movs	r3, #6
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x240>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x240>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x240>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x328>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_GPIO_Init+0x354>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a34      	ldr	r2, [pc, #208]	; (8002450 <HAL_GPIO_Init+0x354>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_GPIO_Init+0x354>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <HAL_GPIO_Init+0x354>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <HAL_GPIO_Init+0x354>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_GPIO_Init+0x354>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_GPIO_Init+0x354>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <HAL_GPIO_Init+0x354>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f ae86 	bls.w	800211c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40021c00 	.word	0x40021c00
 8002448:	40022000 	.word	0x40022000
 800244c:	40022400 	.word	0x40022400
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fe6e 	bl	8001188 <HAL_GPIO_EXTI_Callback>
  }
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fa86 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800253e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d104      	bne.n	8002552 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_I2C_Init+0x11c>)
 800255e:	430b      	orrs	r3, r1
 8002560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69d9      	ldr	r1, [r3, #28]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1a      	ldr	r2, [r3, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	02008000 	.word	0x02008000

080025d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
 80025e8:	4613      	mov	r3, r2
 80025ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	f040 80da 	bne.w	80027ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_I2C_Master_Transmit+0x30>
 8002604:	2302      	movs	r3, #2
 8002606:	e0d3      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1d8>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002610:	f7ff fb92 	bl	8001d38 <HAL_GetTick>
 8002614:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2319      	movs	r3, #25
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fefb 	bl	800341e <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0be      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2221      	movs	r2, #33	; 0x21
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2210      	movs	r2, #16
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	893a      	ldrh	r2, [r7, #8]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	2bff      	cmp	r3, #255	; 0xff
 8002662:	d90e      	bls.n	8002682 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	4b51      	ldr	r3, [pc, #324]	; (80027b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f001 f8f2 	bl	8003864 <I2C_TransferConfig>
 8002680:	e06c      	b.n	800275c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	b2da      	uxtb	r2, r3
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f001 f8e1 	bl	8003864 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026a2:	e05b      	b.n	800275c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	6a39      	ldr	r1, [r7, #32]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fef8 	bl	800349e <I2C_WaitOnTXISFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e07b      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d034      	beq.n	800275c <HAL_I2C_Master_Transmit+0x184>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d130      	bne.n	800275c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fe8a 	bl	800341e <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e04d      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2bff      	cmp	r3, #255	; 0xff
 800271c:	d90e      	bls.n	800273c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22ff      	movs	r2, #255	; 0xff
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	b2da      	uxtb	r2, r3
 800272a:	8979      	ldrh	r1, [r7, #10]
 800272c:	2300      	movs	r3, #0
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f001 f895 	bl	8003864 <I2C_TransferConfig>
 800273a:	e00f      	b.n	800275c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	b2da      	uxtb	r2, r3
 800274c:	8979      	ldrh	r1, [r7, #10]
 800274e:	2300      	movs	r3, #0
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f001 f884 	bl	8003864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d19e      	bne.n	80026a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	6a39      	ldr	r1, [r7, #32]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fed7 	bl	800351e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e01a      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2220      	movs	r2, #32
 8002780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_I2C_Master_Transmit+0x1e4>)
 800278e:	400b      	ands	r3, r1
 8002790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	80002000 	.word	0x80002000
 80027bc:	fe00e800 	.word	0xfe00e800

080027c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	460b      	mov	r3, r1
 80027ce:	817b      	strh	r3, [r7, #10]
 80027d0:	4613      	mov	r3, r2
 80027d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	f040 80db 	bne.w	8002998 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2C_Master_Receive+0x30>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0d4      	b.n	800299a <HAL_I2C_Master_Receive+0x1da>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027f8:	f7ff fa9e 	bl	8001d38 <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2319      	movs	r3, #25
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fe07 	bl	800341e <I2C_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0bf      	b.n	800299a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2222      	movs	r2, #34	; 0x22
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2210      	movs	r2, #16
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2bff      	cmp	r3, #255	; 0xff
 800284a:	d90e      	bls.n	800286a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	b2da      	uxtb	r2, r3
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <HAL_I2C_Master_Receive+0x1e4>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fffe 	bl	8003864 <I2C_TransferConfig>
 8002868:	e06d      	b.n	8002946 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <HAL_I2C_Master_Receive+0x1e4>)
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 ffed 	bl	8003864 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800288a:	e05c      	b.n	8002946 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	6a39      	ldr	r1, [r7, #32]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fe81 	bl	8003598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e07c      	b.n	800299a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d034      	beq.n	8002946 <HAL_I2C_Master_Receive+0x186>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d130      	bne.n	8002946 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fd95 	bl	800341e <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e04d      	b.n	800299a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	2bff      	cmp	r3, #255	; 0xff
 8002906:	d90e      	bls.n	8002926 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	b2da      	uxtb	r2, r3
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	2300      	movs	r3, #0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 ffa0 	bl	8003864 <I2C_TransferConfig>
 8002924:	e00f      	b.n	8002946 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 ff8f 	bl	8003864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d19d      	bne.n	800288c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	6a39      	ldr	r1, [r7, #32]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fde2 	bl	800351e <I2C_WaitOnSTOPFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e01a      	b.n	800299a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_I2C_Master_Receive+0x1e8>)
 8002978:	400b      	ands	r3, r1
 800297a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	80002400 	.word	0x80002400
 80029a8:	fe00e800 	.word	0xfe00e800

080029ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
  }
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	09db      	lsrs	r3, r3, #7
 8002a08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a24:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	0a9b      	lsrs	r3, r3, #10
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	09db      	lsrs	r3, r3, #7
 8002a36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f043 0208 	orr.w	r2, r3, #8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a52:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	0a5b      	lsrs	r3, r3, #9
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	09db      	lsrs	r3, r3, #7
 8002a64:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f043 0202 	orr.w	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 030b 	and.w	r3, r3, #11
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fb89 	bl	80031ac <I2C_ITError>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <I2C_Slave_ISR_IT+0x24>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e0ec      	b.n	8002d20 <I2C_Slave_ISR_IT+0x1fe>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b66:	6939      	ldr	r1, [r7, #16]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f9bf 	bl	8002eec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04d      	beq.n	8002c16 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d047      	beq.n	8002c16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d128      	bne.n	8002be2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b28      	cmp	r3, #40	; 0x28
 8002b9a:	d108      	bne.n	8002bae <I2C_Slave_ISR_IT+0x8c>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba2:	d104      	bne.n	8002bae <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ba4:	6939      	ldr	r1, [r7, #16]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 faaa 	bl	8003100 <I2C_ITListenCplt>
 8002bac:	e032      	b.n	8002c14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b29      	cmp	r3, #41	; 0x29
 8002bb8:	d10e      	bne.n	8002bd8 <I2C_Slave_ISR_IT+0xb6>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc0:	d00a      	beq.n	8002bd8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fbe5 	bl	800339a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f92d 	bl	8002e30 <I2C_ITSlaveSeqCplt>
 8002bd6:	e01d      	b.n	8002c14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002be0:	e096      	b.n	8002d10 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f043 0204 	orr.w	r2, r3, #4
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d004      	beq.n	8002c06 <I2C_Slave_ISR_IT+0xe4>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c02:	f040 8085 	bne.w	8002d10 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 facd 	bl	80031ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c12:	e07d      	b.n	8002d10 <I2C_Slave_ISR_IT+0x1ee>
 8002c14:	e07c      	b.n	8002d10 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d030      	beq.n	8002c84 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d02a      	beq.n	8002c84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d018      	beq.n	8002c6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d14f      	bne.n	8002d14 <I2C_Slave_ISR_IT+0x1f2>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7a:	d04b      	beq.n	8002d14 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f8d7 	bl	8002e30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c82:	e047      	b.n	8002d14 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	08db      	lsrs	r3, r3, #3
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c9c:	6939      	ldr	r1, [r7, #16]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f842 	bl	8002d28 <I2C_ITAddrCplt>
 8002ca4:	e037      	b.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d031      	beq.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02b      	beq.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cf8:	e00d      	b.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d002      	beq.n	8002d08 <I2C_Slave_ISR_IT+0x1e6>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f891 	bl	8002e30 <I2C_ITSlaveSeqCplt>
 8002d0e:	e002      	b.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002d14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d3e:	2b28      	cmp	r3, #40	; 0x28
 8002d40:	d16a      	bne.n	8002e18 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d60:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d7c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d138      	bne.n	8002df8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	09db      	lsrs	r3, r3, #7
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	89bb      	ldrh	r3, [r7, #12]
 8002d8e:	4053      	eors	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f003 0306 	and.w	r3, r3, #6
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11c      	bne.n	8002dd4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d13b      	bne.n	8002e28 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dc6:	89ba      	ldrh	r2, [r7, #12]
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fe7c 	bl	8002aca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dd2:	e029      	b.n	8002e28 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fd73 	bl	80038c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dea:	89ba      	ldrh	r2, [r7, #12]
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fe6a 	bl	8002aca <HAL_I2C_AddrCallback>
}
 8002df6:	e017      	b.n	8002e28 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fd63 	bl	80038c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e0a:	89ba      	ldrh	r2, [r7, #12]
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fe5a 	bl	8002aca <HAL_I2C_AddrCallback>
}
 8002e16:	e007      	b.n	8002e28 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	0b9b      	lsrs	r3, r3, #14
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e00d      	b.n	8002e82 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	0bdb      	lsrs	r3, r3, #15
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b29      	cmp	r3, #41	; 0x29
 8002e8c:	d112      	bne.n	8002eb4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2228      	movs	r2, #40	; 0x28
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2221      	movs	r2, #33	; 0x21
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fd12 	bl	80038c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fdf8 	bl	8002aa2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002eb2:	e017      	b.n	8002ee4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ebe:	d111      	bne.n	8002ee4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2228      	movs	r2, #40	; 0x28
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2222      	movs	r2, #34	; 0x22
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ece:	2102      	movs	r1, #2
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fcf9 	bl	80038c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fde9 	bl	8002ab6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b21      	cmp	r3, #33	; 0x21
 8002f16:	d002      	beq.n	8002f1e <I2C_ITSlaveCplt+0x32>
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b29      	cmp	r3, #41	; 0x29
 8002f1c:	d108      	bne.n	8002f30 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f1e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fcd0 	bl	80038c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2221      	movs	r2, #33	; 0x21
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f2e:	e00d      	b.n	8002f4c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b22      	cmp	r3, #34	; 0x22
 8002f34:	d002      	beq.n	8002f3c <I2C_ITSlaveCplt+0x50>
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3a:	d107      	bne.n	8002f4c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f3c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fcc1 	bl	80038c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2222      	movs	r2, #34	; 0x22
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <I2C_ITSlaveCplt+0x20c>)
 8002f68:	400b      	ands	r3, r1
 8002f6a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fa14 	bl	800339a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	0b9b      	lsrs	r3, r3, #14
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fa4:	e018      	b.n	8002fd8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	0bdb      	lsrs	r3, r3, #15
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d012      	beq.n	8002fd8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f023 0304 	bic.w	r3, r3, #4
 8002fea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00c      	beq.n	8003026 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f043 0204 	orr.w	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8a7 	bl	80031ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b28      	cmp	r3, #40	; 0x28
 8003068:	d141      	bne.n	80030ee <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f847 	bl	8003100 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003072:	e03c      	b.n	80030ee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800307c:	d014      	beq.n	80030a8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fed6 	bl	8002e30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <I2C_ITSlaveCplt+0x210>)
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fd20 	bl	8002ae6 <HAL_I2C_ListenCpltCallback>
}
 80030a6:	e022      	b.n	80030ee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b22      	cmp	r3, #34	; 0x22
 80030b2:	d10e      	bne.n	80030d2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fcf3 	bl	8002ab6 <HAL_I2C_SlaveRxCpltCallback>
}
 80030d0:	e00d      	b.n	80030ee <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fcda 	bl	8002aa2 <HAL_I2C_SlaveTxCpltCallback>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	fe00e800 	.word	0xfe00e800
 80030fc:	ffff0000 	.word	0xffff0000

08003100 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <I2C_ITListenCplt+0xa8>)
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d022      	beq.n	800317e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f043 0204 	orr.w	r2, r3, #4
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800317e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fba0 	bl	80038c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fca4 	bl	8002ae6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	ffff0000 	.word	0xffff0000

080031ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a5d      	ldr	r2, [pc, #372]	; (8003340 <I2C_ITError+0x194>)
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b28      	cmp	r3, #40	; 0x28
 80031e2:	d005      	beq.n	80031f0 <I2C_ITError+0x44>
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b29      	cmp	r3, #41	; 0x29
 80031e8:	d002      	beq.n	80031f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b2a      	cmp	r3, #42	; 0x2a
 80031ee:	d10b      	bne.n	8003208 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031f0:	2103      	movs	r1, #3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fb68 	bl	80038c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2228      	movs	r2, #40	; 0x28
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a50      	ldr	r2, [pc, #320]	; (8003344 <I2C_ITError+0x198>)
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
 8003206:	e011      	b.n	800322c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003208:	f248 0103 	movw	r1, #32771	; 0x8003
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fb5b 	bl	80038c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b60      	cmp	r3, #96	; 0x60
 800321c:	d003      	beq.n	8003226 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	2b00      	cmp	r3, #0
 8003238:	d039      	beq.n	80032ae <I2C_ITError+0x102>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b11      	cmp	r3, #17
 800323e:	d002      	beq.n	8003246 <I2C_ITError+0x9a>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b21      	cmp	r3, #33	; 0x21
 8003244:	d133      	bne.n	80032ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003254:	d107      	bne.n	8003266 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003264:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ff37 	bl	80020de <HAL_DMA_GetState>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d017      	beq.n	80032a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	4a33      	ldr	r2, [pc, #204]	; (8003348 <I2C_ITError+0x19c>)
 800327c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe ff05 	bl	800209a <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04d      	beq.n	8003332 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032a4:	e045      	b.n	8003332 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f850 	bl	800334c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032ac:	e041      	b.n	8003332 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d039      	beq.n	800332a <I2C_ITError+0x17e>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b12      	cmp	r3, #18
 80032ba:	d002      	beq.n	80032c2 <I2C_ITError+0x116>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b22      	cmp	r3, #34	; 0x22
 80032c0:	d133      	bne.n	800332a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d0:	d107      	bne.n	80032e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fef9 	bl	80020de <HAL_DMA_GetState>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d017      	beq.n	8003322 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	4a14      	ldr	r2, [pc, #80]	; (8003348 <I2C_ITError+0x19c>)
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fec7 	bl	800209a <HAL_DMA_Abort_IT>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d011      	beq.n	8003336 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003320:	e009      	b.n	8003336 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f812 	bl	800334c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003328:	e005      	b.n	8003336 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f80e 	bl	800334c <I2C_TreatErrorCallback>
  }
}
 8003330:	e002      	b.n	8003338 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003336:	bf00      	nop
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	ffff0000 	.word	0xffff0000
 8003344:	08002b23 	.word	0x08002b23
 8003348:	080033e3 	.word	0x080033e3

0800334c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d10e      	bne.n	800337e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fbc9 	bl	8002b0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800337c:	e009      	b.n	8003392 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff fbb4 	bl	8002afa <HAL_I2C_ErrorCallback>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d103      	bne.n	80033b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d007      	beq.n	80033d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	619a      	str	r2, [r3, #24]
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2200      	movs	r2, #0
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	2200      	movs	r2, #0
 800340e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ff9b 	bl	800334c <I2C_TreatErrorCallback>
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342e:	e022      	b.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d01e      	beq.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7fe fc7e 	bl	8001d38 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e00f      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	429a      	cmp	r2, r3
 8003492:	d0cd      	beq.n	8003430 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034aa:	e02c      	b.n	8003506 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f8eb 	bl	800368c <I2C_IsErrorOccurred>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e02a      	b.n	8003516 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d01e      	beq.n	8003506 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fc36 	bl	8001d38 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d113      	bne.n	8003506 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e007      	b.n	8003516 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d1cb      	bne.n	80034ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800352a:	e028      	b.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f8ab 	bl	800368c <I2C_IsErrorOccurred>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e026      	b.n	800358e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe fbfa 	bl	8001d38 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e007      	b.n	800358e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b20      	cmp	r3, #32
 800358a:	d1cf      	bne.n	800352c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a4:	e064      	b.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f86e 	bl	800368c <I2C_IsErrorOccurred>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e062      	b.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d138      	bne.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d105      	bne.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e04e      	b.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d107      	bne.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2210      	movs	r2, #16
 80035f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2204      	movs	r2, #4
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
 80035fe:	e002      	b.n	8003606 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2220      	movs	r2, #32
 800360c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800361a:	400b      	ands	r3, r1
 800361c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e022      	b.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fe fb7d 	bl	8001d38 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d193      	bne.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	fe00e800 	.word	0xfe00e800

0800368c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d075      	beq.n	80037a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2210      	movs	r2, #16
 80036be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036c0:	e056      	b.n	8003770 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d052      	beq.n	8003770 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fb35 	bl	8001d38 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_IsErrorOccurred+0x54>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d147      	bne.n	8003770 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003702:	d12e      	bne.n	8003762 <I2C_IsErrorOccurred+0xd6>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370a:	d02a      	beq.n	8003762 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b20      	cmp	r3, #32
 8003710:	d027      	beq.n	8003762 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003720:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003722:	f7fe fb09 	bl	8001d38 <HAL_GetTick>
 8003726:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003728:	e01b      	b.n	8003762 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800372a:	f7fe fb05 	bl	8001d38 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b19      	cmp	r3, #25
 8003736:	d914      	bls.n	8003762 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d1dc      	bne.n	800372a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d003      	beq.n	8003786 <I2C_IsErrorOccurred+0xfa>
 800377e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003782:	2b00      	cmp	r3, #0
 8003784:	d09d      	beq.n	80036c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	f043 0308 	orr.w	r3, r3, #8
 80037de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01c      	beq.n	8003854 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff fdbd 	bl	800339a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <I2C_IsErrorOccurred+0x1d4>)
 800382c:	400b      	ands	r3, r1
 800382e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	fe00e800 	.word	0xfe00e800

08003864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	817b      	strh	r3, [r7, #10]
 8003872:	4613      	mov	r3, r2
 8003874:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800387c:	7a7b      	ldrb	r3, [r7, #9]
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003884:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	4313      	orrs	r3, r2
 800388e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003892:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	0d5b      	lsrs	r3, r3, #21
 800389e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <I2C_TransferConfig+0x60>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	43db      	mvns	r3, r3
 80038a8:	ea02 0103 	and.w	r1, r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	03ff63ff 	.word	0x03ff63ff

080038c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038d8:	887b      	ldrh	r3, [r7, #2]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00f      	beq.n	8003902 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80038e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038f6:	2b28      	cmp	r3, #40	; 0x28
 80038f8:	d003      	beq.n	8003902 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003900:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003902:	887b      	ldrh	r3, [r7, #2]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00f      	beq.n	800392c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003912:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003920:	2b28      	cmp	r3, #40	; 0x28
 8003922:	d003      	beq.n	800392c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800392a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800392c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da03      	bge.n	800393c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800393a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d103      	bne.n	800394a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003948:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	2b20      	cmp	r3, #32
 800394e:	d103      	bne.n	8003958 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f043 0320 	orr.w	r3, r3, #32
 8003956:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d103      	bne.n	8003966 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003964:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43da      	mvns	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	400a      	ands	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	d138      	bne.n	8003a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e032      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d139      	bne.n	8003aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e033      	b.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	; 0x24
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40007000 	.word	0x40007000

08003ad4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b02:	f7fe f919 	bl	8001d38 <HAL_GetTick>
 8003b06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b08:	e009      	b.n	8003b1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b0a:	f7fe f915 	bl	8001d38 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b18:	d901      	bls.n	8003b1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e022      	b.n	8003b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b38:	f7fe f8fe 	bl	8001d38 <HAL_GetTick>
 8003b3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b3e:	e009      	b.n	8003b54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b40:	f7fe f8fa 	bl	8001d38 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b4e:	d901      	bls.n	8003b54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e007      	b.n	8003b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b60:	d1ee      	bne.n	8003b40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e29b      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8087 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b98:	4b96      	ldr	r3, [pc, #600]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d00c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba4:	4b93      	ldr	r3, [pc, #588]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d112      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62>
 8003bb0:	4b90      	ldr	r3, [pc, #576]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbe:	4b8d      	ldr	r3, [pc, #564]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d06c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x130>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d168      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e275      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x7a>
 8003be0:	4b84      	ldr	r3, [pc, #528]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a83      	ldr	r2, [pc, #524]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e02e      	b.n	8003c4c <HAL_RCC_OscConfig+0xd8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x9c>
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7e      	ldr	r2, [pc, #504]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b7c      	ldr	r3, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7b      	ldr	r2, [pc, #492]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e01d      	b.n	8003c4c <HAL_RCC_OscConfig+0xd8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a75      	ldr	r2, [pc, #468]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b73      	ldr	r3, [pc, #460]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a72      	ldr	r2, [pc, #456]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0xd8>
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6b      	ldr	r2, [pc, #428]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f870 	bl	8001d38 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe f86c 	bl	8001d38 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e229      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f85c 	bl	8001d38 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe f858 	bl	8001d38 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e215      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x110>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d069      	beq.n	8003d86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x190>
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x17a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1e9      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	493d      	ldr	r1, [pc, #244]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e040      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d023      	beq.n	8003d54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe f80e 	bl	8001d38 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d20:	f7fe f80a 	bl	8001d38 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1c7      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4929      	ldr	r1, [pc, #164]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
 8003d52:	e018      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd ffea 	bl	8001d38 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d68:	f7fd ffe6 	bl	8001d38 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e1a3      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d038      	beq.n	8003e04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd ffc7 	bl	8001d38 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dae:	f7fd ffc3 	bl	8001d38 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e180      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x23a>
 8003dcc:	e01a      	b.n	8003e04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fd ffad 	bl	8001d38 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fd ffa9 	bl	8001d38 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d903      	bls.n	8003df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e166      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
 8003df4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a4 	beq.w	8003f5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e12:	4b8c      	ldr	r3, [pc, #560]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	4b89      	ldr	r3, [pc, #548]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a88      	ldr	r2, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b86      	ldr	r3, [pc, #536]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3a:	4b83      	ldr	r3, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x4d4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d118      	bne.n	8003e78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e46:	4b80      	ldr	r3, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x4d4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a7f      	ldr	r2, [pc, #508]	; (8004048 <HAL_RCC_OscConfig+0x4d4>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fd ff71 	bl	8001d38 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5a:	f7fd ff6d 	bl	8001d38 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	; 0x64
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e12a      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6c:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x4d4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCC_OscConfig+0x31a>
 8003e80:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a6f      	ldr	r2, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	e02d      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x33c>
 8003e96:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	4a67      	ldr	r2, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
 8003eae:	e01c      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x35e>
 8003eb8:	4b62      	ldr	r3, [pc, #392]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a61      	ldr	r2, [pc, #388]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	4b5f      	ldr	r3, [pc, #380]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a5e      	ldr	r2, [pc, #376]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	e00b      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a5b      	ldr	r2, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a58      	ldr	r2, [pc, #352]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d015      	beq.n	8003f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd ff21 	bl	8001d38 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd ff1d 	bl	8001d38 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0d8      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	4b4c      	ldr	r3, [pc, #304]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ee      	beq.n	8003efa <HAL_RCC_OscConfig+0x386>
 8003f1c:	e014      	b.n	8003f48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fd ff0b 	bl	8001d38 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fd ff07 	bl	8001d38 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0c2      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	4b41      	ldr	r3, [pc, #260]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ee      	bne.n	8003f26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d105      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a3c      	ldr	r2, [pc, #240]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80ae 	beq.w	80040c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f64:	4b37      	ldr	r3, [pc, #220]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d06d      	beq.n	800404c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d14b      	bne.n	8004010 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a31      	ldr	r2, [pc, #196]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fed8 	bl	8001d38 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fd fed4 	bl	8001d38 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e091      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	491b      	ldr	r1, [pc, #108]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fea6 	bl	8001d38 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd fea2 	bl	8001d38 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e05f      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
 800400e:	e057      	b.n	80040c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fe8c 	bl	8001d38 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd fe88 	bl	8001d38 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e045      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x4b0>
 8004042:	e03d      	b.n	80040c0 <HAL_RCC_OscConfig+0x54c>
 8004044:	40023800 	.word	0x40023800
 8004048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_RCC_OscConfig+0x558>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d030      	beq.n	80040bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d129      	bne.n	80040bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d122      	bne.n	80040bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d119      	bne.n	80040bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d10f      	bne.n	80040bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0d0      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d910      	bls.n	8004118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b67      	ldr	r3, [pc, #412]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 020f 	bic.w	r2, r3, #15
 80040fe:	4965      	ldr	r1, [pc, #404]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b8      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004130:	4b59      	ldr	r3, [pc, #356]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a52      	ldr	r2, [pc, #328]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	494d      	ldr	r1, [pc, #308]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d040      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d115      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e07f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e073      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a2:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06b      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b2:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f023 0203 	bic.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4936      	ldr	r1, [pc, #216]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fd fdb8 	bl	8001d38 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041cc:	f7fd fdb4 	bl	8001d38 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e053      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 020c 	and.w	r2, r3, #12
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1eb      	bne.n	80041cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d210      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 020f 	bic.w	r2, r3, #15
 800420a:	4922      	ldr	r1, [pc, #136]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e032      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004230:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4916      	ldr	r1, [pc, #88]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800424e:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	490e      	ldr	r1, [pc, #56]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004262:	f000 f821 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004266:	4602      	mov	r2, r0
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	490a      	ldr	r1, [pc, #40]	; (800429c <HAL_RCC_ClockConfig+0x1cc>)
 8004274:	5ccb      	ldrb	r3, [r1, r3]
 8004276:	fa22 f303 	lsr.w	r3, r2, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1d0>)
 800427c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd fd14 	bl	8001cb0 <HAL_InitTick>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023c00 	.word	0x40023c00
 8004298:	40023800 	.word	0x40023800
 800429c:	080089ac 	.word	0x080089ac
 80042a0:	20000130 	.word	0x20000130
 80042a4:	20000134 	.word	0x20000134

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	2300      	movs	r3, #0
 80042ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c0:	4b67      	ldr	r3, [pc, #412]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x40>
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f200 80bd 	bhi.w	800444c <HAL_RCC_GetSysClockFreq+0x1a4>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x34>
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042da:	e0b7      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042de:	60bb      	str	r3, [r7, #8]
      break;
 80042e0:	e0b7      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042e2:	4b61      	ldr	r3, [pc, #388]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042e4:	60bb      	str	r3, [r7, #8]
      break;
 80042e6:	e0b4      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e8:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042f2:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04d      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fe:	4b58      	ldr	r3, [pc, #352]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	461a      	mov	r2, r3
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	ea02 0800 	and.w	r8, r2, r0
 8004316:	ea03 0901 	and.w	r9, r3, r1
 800431a:	4640      	mov	r0, r8
 800431c:	4649      	mov	r1, r9
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	014b      	lsls	r3, r1, #5
 8004328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800432c:	0142      	lsls	r2, r0, #5
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	ebb0 0008 	subs.w	r0, r0, r8
 8004336:	eb61 0109 	sbc.w	r1, r1, r9
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	018b      	lsls	r3, r1, #6
 8004344:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004348:	0182      	lsls	r2, r0, #6
 800434a:	1a12      	subs	r2, r2, r0
 800434c:	eb63 0301 	sbc.w	r3, r3, r1
 8004350:	f04f 0000 	mov.w	r0, #0
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	00d9      	lsls	r1, r3, #3
 800435a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435e:	00d0      	lsls	r0, r2, #3
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	eb12 0208 	adds.w	r2, r2, r8
 8004368:	eb43 0309 	adc.w	r3, r3, r9
 800436c:	f04f 0000 	mov.w	r0, #0
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	0259      	lsls	r1, r3, #9
 8004376:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800437a:	0250      	lsls	r0, r2, #9
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	f7fb ffb0 	bl	80002f0 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4613      	mov	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e04a      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	461a      	mov	r2, r3
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	ea02 0400 	and.w	r4, r2, r0
 80043b2:	ea03 0501 	and.w	r5, r3, r1
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	014b      	lsls	r3, r1, #5
 80043c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043c8:	0142      	lsls	r2, r0, #5
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	1b00      	subs	r0, r0, r4
 80043d0:	eb61 0105 	sbc.w	r1, r1, r5
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	018b      	lsls	r3, r1, #6
 80043de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043e2:	0182      	lsls	r2, r0, #6
 80043e4:	1a12      	subs	r2, r2, r0
 80043e6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	00d9      	lsls	r1, r3, #3
 80043f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f8:	00d0      	lsls	r0, r2, #3
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	1912      	adds	r2, r2, r4
 8004400:	eb45 0303 	adc.w	r3, r5, r3
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	0299      	lsls	r1, r3, #10
 800440e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004412:	0290      	lsls	r0, r2, #10
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f7fb ff64 	bl	80002f0 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4613      	mov	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	3301      	adds	r3, #1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	60bb      	str	r3, [r7, #8]
      break;
 800444a:	e002      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800444e:	60bb      	str	r3, [r7, #8]
      break;
 8004450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004452:	68bb      	ldr	r3, [r7, #8]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
 8004464:	00f42400 	.word	0x00f42400
 8004468:	007a1200 	.word	0x007a1200

0800446c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCC_GetHCLKFreq+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000130 	.word	0x20000130

08004484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004488:	f7ff fff0 	bl	800446c <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	080089bc 	.word	0x080089bc

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044b0:	f7ff ffdc 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0b5b      	lsrs	r3, r3, #13
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	080089bc 	.word	0x080089bc

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044fc:	4b69      	ldr	r3, [pc, #420]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a68      	ldr	r2, [pc, #416]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004506:	6093      	str	r3, [r2, #8]
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	4964      	ldr	r1, [pc, #400]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d017      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800452e:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	4959      	ldr	r1, [pc, #356]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800455a:	2301      	movs	r3, #1
 800455c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800456a:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	494a      	ldr	r1, [pc, #296]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 808b 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6413      	str	r3, [r2, #64]	; 0x40
 80045c4:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a34      	ldr	r2, [pc, #208]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fd fbac 	bl	8001d38 <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd fba8 	bl	8001d38 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e38f      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004602:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d035      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d02e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004620:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d114      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd fb70 	bl	8001d38 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fb6c 	bl	8001d38 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e351      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d111      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800469a:	400b      	ands	r3, r1
 800469c:	4901      	ldr	r1, [pc, #4]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
 80046a2:	e00b      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	0ffffcff 	.word	0x0ffffcff
 80046b0:	4bb3      	ldr	r3, [pc, #716]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4ab2      	ldr	r2, [pc, #712]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ba:	6093      	str	r3, [r2, #8]
 80046bc:	4bb0      	ldr	r3, [pc, #704]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	49ad      	ldr	r1, [pc, #692]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046da:	4ba9      	ldr	r3, [pc, #676]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e0:	4aa7      	ldr	r2, [pc, #668]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046ea:	4ba5      	ldr	r3, [pc, #660]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	49a2      	ldr	r1, [pc, #648]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004708:	4b9d      	ldr	r3, [pc, #628]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004716:	499a      	ldr	r1, [pc, #616]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472a:	4b95      	ldr	r3, [pc, #596]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	4991      	ldr	r1, [pc, #580]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474c:	4b8c      	ldr	r3, [pc, #560]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	4989      	ldr	r1, [pc, #548]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800476e:	4b84      	ldr	r3, [pc, #528]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4980      	ldr	r1, [pc, #512]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004790:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4978      	ldr	r1, [pc, #480]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b2:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f023 020c 	bic.w	r2, r3, #12
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	496f      	ldr	r1, [pc, #444]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e2:	4967      	ldr	r1, [pc, #412]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047f6:	4b62      	ldr	r3, [pc, #392]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	495e      	ldr	r1, [pc, #376]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	4956      	ldr	r1, [pc, #344]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	494d      	ldr	r1, [pc, #308]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	4945      	ldr	r1, [pc, #276]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800487e:	4b40      	ldr	r3, [pc, #256]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	493c      	ldr	r1, [pc, #240]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048a0:	4b37      	ldr	r3, [pc, #220]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ae:	4934      	ldr	r1, [pc, #208]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d0:	492b      	ldr	r1, [pc, #172]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e0:	d101      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	491b      	ldr	r1, [pc, #108]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004934:	4912      	ldr	r1, [pc, #72]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004958:	4909      	ldr	r1, [pc, #36]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	4986      	ldr	r1, [pc, #536]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004998:	4b81      	ldr	r3, [pc, #516]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a8:	497d      	ldr	r1, [pc, #500]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d006      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80d6 	beq.w	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c4:	4b76      	ldr	r3, [pc, #472]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a75      	ldr	r2, [pc, #468]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d0:	f7fd f9b2 	bl	8001d38 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049d8:	f7fd f9ae 	bl	8001d38 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e195      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ea:	4b6d      	ldr	r3, [pc, #436]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d021      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a0a:	4b65      	ldr	r3, [pc, #404]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1e:	0e1b      	lsrs	r3, r3, #24
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	019a      	lsls	r2, r3, #6
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	071b      	lsls	r3, r3, #28
 8004a3e:	4958      	ldr	r1, [pc, #352]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02e      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a70:	d129      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a72:	4b4b      	ldr	r3, [pc, #300]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a80:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	0f1b      	lsrs	r3, r3, #28
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	019a      	lsls	r2, r3, #6
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	071b      	lsls	r3, r3, #28
 8004aa6:	493e      	ldr	r1, [pc, #248]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004aae:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab4:	f023 021f 	bic.w	r2, r3, #31
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4938      	ldr	r1, [pc, #224]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01d      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ad2:	4b33      	ldr	r3, [pc, #204]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	0f1b      	lsrs	r3, r3, #28
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	019a      	lsls	r2, r3, #6
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	019a      	lsls	r2, r3, #6
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	491a      	ldr	r1, [pc, #104]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fd f8f5 	bl	8001d38 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b52:	f7fd f8f1 	bl	8001d38 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b64      	cmp	r3, #100	; 0x64
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0d8      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f040 80ce 	bne.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fd f8d8 	bl	8001d38 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b8c:	f7fd f8d4 	bl	8001d38 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d904      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0bb      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba4:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb0:	d0ec      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02e      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d12a      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004be8:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	0f1b      	lsrs	r3, r3, #28
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	4944      	ldr	r1, [pc, #272]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c16:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d022      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c44:	d11d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	0f1b      	lsrs	r3, r3, #28
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	071b      	lsls	r3, r3, #28
 8004c7a:	4929      	ldr	r1, [pc, #164]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d028      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c9c:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	4917      	ldr	r1, [pc, #92]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4911      	ldr	r1, [pc, #68]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fd f824 	bl	8001d38 <HAL_GetTick>
 8004cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cf4:	f7fd f820 	bl	8001d38 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e007      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d1ef      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e049      	b.n	8004dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc fe68 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 fd30 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d001      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e054      	b.n	8004e96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d022      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d01d      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d018      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a21      	ldr	r2, [pc, #132]	; (8004eac <HAL_TIM_Base_Start_IT+0xd8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00e      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d009      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <HAL_TIM_Base_Start_IT+0xe8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d115      	bne.n	8004e80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xec>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d015      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0xbe>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d011      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	e008      	b.n	8004e92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e000      	b.n	8004e94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40001800 	.word	0x40001800
 8004ec0:	00010007 	.word	0x00010007

08004ec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e049      	b.n	8004f6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f841 	bl	8004f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 fc60 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <HAL_TIM_PWM_Start+0x24>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e03c      	b.n	8005026 <HAL_TIM_PWM_Start+0x9e>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d109      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x3e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e02f      	b.n	8005026 <HAL_TIM_PWM_Start+0x9e>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d109      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x58>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e022      	b.n	8005026 <HAL_TIM_PWM_Start+0x9e>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d109      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x72>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e015      	b.n	8005026 <HAL_TIM_PWM_Start+0x9e>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_PWM_Start+0x8c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e008      	b.n	8005026 <HAL_TIM_PWM_Start+0x9e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e092      	b.n	8005154 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Start+0xb6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	e023      	b.n	8005086 <HAL_TIM_PWM_Start+0xfe>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d104      	bne.n	800504e <HAL_TIM_PWM_Start+0xc6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800504c:	e01b      	b.n	8005086 <HAL_TIM_PWM_Start+0xfe>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d104      	bne.n	800505e <HAL_TIM_PWM_Start+0xd6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800505c:	e013      	b.n	8005086 <HAL_TIM_PWM_Start+0xfe>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b0c      	cmp	r3, #12
 8005062:	d104      	bne.n	800506e <HAL_TIM_PWM_Start+0xe6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800506c:	e00b      	b.n	8005086 <HAL_TIM_PWM_Start+0xfe>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b10      	cmp	r3, #16
 8005072:	d104      	bne.n	800507e <HAL_TIM_PWM_Start+0xf6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800507c:	e003      	b.n	8005086 <HAL_TIM_PWM_Start+0xfe>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2201      	movs	r2, #1
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 ff32 	bl	8005ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	; (800515c <HAL_TIM_PWM_Start+0x1d4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x120>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <HAL_TIM_PWM_Start+0x1d8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_PWM_Start+0x124>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_TIM_PWM_Start+0x126>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a25      	ldr	r2, [pc, #148]	; (800515c <HAL_TIM_PWM_Start+0x1d4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d01d      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_TIM_PWM_Start+0x1dc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a20      	ldr	r2, [pc, #128]	; (8005168 <HAL_TIM_PWM_Start+0x1e0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_TIM_PWM_Start+0x1e4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_TIM_PWM_Start+0x1d8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <HAL_TIM_PWM_Start+0x1e8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIM_PWM_Start+0x18a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_TIM_PWM_Start+0x1ec>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d115      	bne.n	800513e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b17      	ldr	r3, [pc, #92]	; (8005178 <HAL_TIM_PWM_Start+0x1f0>)
 800511a:	4013      	ands	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b06      	cmp	r3, #6
 8005122:	d015      	beq.n	8005150 <HAL_TIM_PWM_Start+0x1c8>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512a:	d011      	beq.n	8005150 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	e008      	b.n	8005150 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e000      	b.n	8005152 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	40014000 	.word	0x40014000
 8005174:	40001800 	.word	0x40001800
 8005178:	00010007 	.word	0x00010007

0800517c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0202 	mvn.w	r2, #2
 80051a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fae4 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fad6 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fae7 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0204 	mvn.w	r2, #4
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 faba 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 faac 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fabd 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b08      	cmp	r3, #8
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0208 	mvn.w	r2, #8
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2204      	movs	r2, #4
 8005256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa90 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa82 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fa93 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b10      	cmp	r3, #16
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0210 	mvn.w	r2, #16
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2208      	movs	r2, #8
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa66 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa58 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa69 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb fe68 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fea4 	bl	8006074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d10e      	bne.n	800535a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d107      	bne.n	800535a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fe97 	bl	8006088 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d10e      	bne.n	8005386 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d107      	bne.n	8005386 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa17 	bl	80057b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b20      	cmp	r3, #32
 8005392:	d10e      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0220 	mvn.w	r2, #32
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fe57 	bl	8006060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e0ff      	b.n	80055da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b14      	cmp	r3, #20
 80053e6:	f200 80f0 	bhi.w	80055ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005445 	.word	0x08005445
 80053f4:	080055cb 	.word	0x080055cb
 80053f8:	080055cb 	.word	0x080055cb
 80053fc:	080055cb 	.word	0x080055cb
 8005400:	08005485 	.word	0x08005485
 8005404:	080055cb 	.word	0x080055cb
 8005408:	080055cb 	.word	0x080055cb
 800540c:	080055cb 	.word	0x080055cb
 8005410:	080054c7 	.word	0x080054c7
 8005414:	080055cb 	.word	0x080055cb
 8005418:	080055cb 	.word	0x080055cb
 800541c:	080055cb 	.word	0x080055cb
 8005420:	08005507 	.word	0x08005507
 8005424:	080055cb 	.word	0x080055cb
 8005428:	080055cb 	.word	0x080055cb
 800542c:	080055cb 	.word	0x080055cb
 8005430:	08005549 	.word	0x08005549
 8005434:	080055cb 	.word	0x080055cb
 8005438:	080055cb 	.word	0x080055cb
 800543c:	080055cb 	.word	0x080055cb
 8005440:	08005589 	.word	0x08005589
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa5c 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0208 	orr.w	r2, r2, #8
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	619a      	str	r2, [r3, #24]
      break;
 8005482:	e0a5      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 faae 	bl	80059ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	619a      	str	r2, [r3, #24]
      break;
 80054c4:	e084      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fb05 	bl	8005adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0208 	orr.w	r2, r2, #8
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]
      break;
 8005504:	e064      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fb5b 	bl	8005bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	61da      	str	r2, [r3, #28]
      break;
 8005546:	e043      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fb92 	bl	8005c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0204 	bic.w	r2, r2, #4
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005586:	e023      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fbc4 	bl	8005d1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055c8:	e002      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
      break;
 80055ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop

080055e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIM_ConfigClockSource+0x1c>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0b4      	b.n	800576a <HAL_TIM_ConfigClockSource+0x186>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_TIM_ConfigClockSource+0x190>)
 800561c:	4013      	ands	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005638:	d03e      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0xd4>
 800563a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563e:	f200 8087 	bhi.w	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005646:	f000 8086 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x172>
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564e:	d87f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b70      	cmp	r3, #112	; 0x70
 8005652:	d01a      	beq.n	800568a <HAL_TIM_ConfigClockSource+0xa6>
 8005654:	2b70      	cmp	r3, #112	; 0x70
 8005656:	d87b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b60      	cmp	r3, #96	; 0x60
 800565a:	d050      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x11a>
 800565c:	2b60      	cmp	r3, #96	; 0x60
 800565e:	d877      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b50      	cmp	r3, #80	; 0x50
 8005662:	d03c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xfa>
 8005664:	2b50      	cmp	r3, #80	; 0x50
 8005666:	d873      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d058      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x13a>
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d86f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b30      	cmp	r3, #48	; 0x30
 8005672:	d064      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	2b30      	cmp	r3, #48	; 0x30
 8005676:	d86b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d060      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d867      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d05c      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d05a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	e062      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f000 fc0d 	bl	8005eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
      break;
 80056b6:	e04f      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f000 fbf6 	bl	8005eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056da:	609a      	str	r2, [r3, #8]
      break;
 80056dc:	e03c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 fb6a 	bl	8005dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2150      	movs	r1, #80	; 0x50
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fbc3 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 80056fc:	e02c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	461a      	mov	r2, r3
 800570c:	f000 fb89 	bl	8005e22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2160      	movs	r1, #96	; 0x60
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fbb3 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 800571c:	e01c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	f000 fb4a 	bl	8005dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2140      	movs	r1, #64	; 0x40
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fba3 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 800573c:	e00c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f000 fb9a 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 800574e:	e003      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e000      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	fffeff88 	.word	0xfffeff88

08005778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a40      	ldr	r2, [pc, #256]	; (80058dc <TIM_Base_SetConfig+0x114>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3d      	ldr	r2, [pc, #244]	; (80058e0 <TIM_Base_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <TIM_Base_SetConfig+0x11c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3b      	ldr	r2, [pc, #236]	; (80058e8 <TIM_Base_SetConfig+0x120>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3a      	ldr	r2, [pc, #232]	; (80058ec <TIM_Base_SetConfig+0x124>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <TIM_Base_SetConfig+0x114>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d027      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <TIM_Base_SetConfig+0x118>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d023      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <TIM_Base_SetConfig+0x11c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01f      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <TIM_Base_SetConfig+0x120>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a29      	ldr	r2, [pc, #164]	; (80058ec <TIM_Base_SetConfig+0x124>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d017      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <TIM_Base_SetConfig+0x128>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <TIM_Base_SetConfig+0x12c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <TIM_Base_SetConfig+0x130>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <TIM_Base_SetConfig+0x134>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a24      	ldr	r2, [pc, #144]	; (8005900 <TIM_Base_SetConfig+0x138>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a23      	ldr	r2, [pc, #140]	; (8005904 <TIM_Base_SetConfig+0x13c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <TIM_Base_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0c      	ldr	r2, [pc, #48]	; (80058ec <TIM_Base_SetConfig+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d103      	bne.n	80058c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	615a      	str	r2, [r3, #20]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800
 80058fc:	40001800 	.word	0x40001800
 8005900:	40001c00 	.word	0x40001c00
 8005904:	40002000 	.word	0x40002000

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4b2b      	ldr	r3, [pc, #172]	; (80059e0 <TIM_OC1_SetConfig+0xd8>)
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <TIM_OC1_SetConfig+0xdc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC1_SetConfig+0x64>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <TIM_OC1_SetConfig+0xe0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0308 	bic.w	r3, r3, #8
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <TIM_OC1_SetConfig+0xdc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC1_SetConfig+0x8e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <TIM_OC1_SetConfig+0xe0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d111      	bne.n	80059ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800599c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	fffeff8f 	.word	0xfffeff8f
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400

080059ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0210 	bic.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <TIM_OC2_SetConfig+0xe4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0320 	bic.w	r3, r3, #32
 8005a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_OC2_SetConfig+0x68>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <TIM_OC2_SetConfig+0xec>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10d      	bne.n	8005a70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <TIM_OC2_SetConfig+0xe8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC2_SetConfig+0x94>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <TIM_OC2_SetConfig+0xec>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d113      	bne.n	8005aa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	feff8fff 	.word	0xfeff8fff
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400

08005adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <TIM_OC3_SetConfig+0xe0>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a22      	ldr	r2, [pc, #136]	; (8005bc0 <TIM_OC3_SetConfig+0xe4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_OC3_SetConfig+0x66>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <TIM_OC3_SetConfig+0xe8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10d      	bne.n	8005b5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_OC3_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_OC3_SetConfig+0x92>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_OC3_SetConfig+0xe8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d113      	bne.n	8005b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	fffeff8f 	.word	0xfffeff8f
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <TIM_OC4_SetConfig+0xa4>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <TIM_OC4_SetConfig+0xa8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC4_SetConfig+0x68>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <TIM_OC4_SetConfig+0xac>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d109      	bne.n	8005c44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	019b      	lsls	r3, r3, #6
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	feff8fff 	.word	0xfeff8fff
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40010400 	.word	0x40010400

08005c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <TIM_OC5_SetConfig+0x98>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <TIM_OC5_SetConfig+0x9c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_OC5_SetConfig+0x5e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <TIM_OC5_SetConfig+0xa0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d109      	bne.n	8005cea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	fffeff8f 	.word	0xfffeff8f
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400

08005d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <TIM_OC6_SetConfig+0x9c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	051b      	lsls	r3, r3, #20
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <TIM_OC6_SetConfig+0xa0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC6_SetConfig+0x60>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <TIM_OC6_SetConfig+0xa4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	feff8fff 	.word	0xfeff8fff
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0201 	bic.w	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 030a 	bic.w	r3, r3, #10
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0210 	bic.w	r2, r3, #16
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f043 0307 	orr.w	r3, r3, #7
 8005ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	609a      	str	r2, [r3, #8]
}
 8005eac:	bf00      	nop
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	bf00      	nop
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1a      	ldr	r2, [r3, #32]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e06d      	b.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a30      	ldr	r2, [pc, #192]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2f      	ldr	r2, [pc, #188]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d108      	bne.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d022      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d01d      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d018      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d013      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00e      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d009      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a15      	ldr	r2, [pc, #84]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d10c      	bne.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40010000 	.word	0x40010000
 8006048:	40010400 	.word	0x40010400
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40014000 	.word	0x40014000
 800605c:	40001800 	.word	0x40001800

08006060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e040      	b.n	8006130 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fb fd74 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fc18 	bl	8006910 <UART_SetConfig>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e022      	b.n	8006130 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fe6e 	bl	8006dd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fef5 	bl	8006f18 <UART_CheckIdleState>
 800612e:	4603      	mov	r3, r0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800614c:	2b20      	cmp	r3, #32
 800614e:	f040 8081 	bne.w	8006254 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_UART_Transmit+0x26>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e079      	b.n	8006256 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_UART_Transmit+0x38>
 800616c:	2302      	movs	r3, #2
 800616e:	e072      	b.n	8006256 <HAL_UART_Transmit+0x11e>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2221      	movs	r2, #33	; 0x21
 8006184:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006186:	f7fb fdd7 	bl	8001d38 <HAL_GetTick>
 800618a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a4:	d108      	bne.n	80061b8 <HAL_UART_Transmit+0x80>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e003      	b.n	80061c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061c8:	e02c      	b.n	8006224 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2180      	movs	r1, #128	; 0x80
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fee8 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e038      	b.n	8006256 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3302      	adds	r3, #2
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	e007      	b.n	8006212 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3301      	adds	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1cc      	bne.n	80061ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2200      	movs	r2, #0
 8006238:	2140      	movs	r1, #64	; 0x40
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 feb5 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e005      	b.n	8006256 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b08a      	sub	sp, #40	; 0x28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006270:	2b20      	cmp	r3, #32
 8006272:	d13d      	bne.n	80062f0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Receive_IT+0x22>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e036      	b.n	80062f2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_UART_Receive_IT+0x34>
 800628e:	2302      	movs	r3, #2
 8006290:	e02f      	b.n	80062f2 <HAL_UART_Receive_IT+0x94>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d018      	beq.n	80062e0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	613b      	str	r3, [r7, #16]
   return(result);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e6      	bne.n	80062ae <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	461a      	mov	r2, r3
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 ff24 	bl	8007134 <UART_Start_Receive_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	e000      	b.n	80062f2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3728      	adds	r7, #40	; 0x28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b0ba      	sub	sp, #232	; 0xe8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006322:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006326:	f640 030f 	movw	r3, #2063	; 0x80f
 800632a:	4013      	ands	r3, r2
 800632c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d115      	bne.n	8006364 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 82a4 	beq.w	80068a2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
      }
      return;
 8006362:	e29e      	b.n	80068a2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8117 	beq.w	800659c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800637a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800637e:	4b85      	ldr	r3, [pc, #532]	; (8006594 <HAL_UART_IRQHandler+0x298>)
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 810a 	beq.w	800659c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d011      	beq.n	80063b8 <HAL_UART_IRQHandler+0xbc>
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ae:	f043 0201 	orr.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d011      	beq.n	80063e8 <HAL_UART_IRQHandler+0xec>
 80063c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2202      	movs	r2, #2
 80063d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	f043 0204 	orr.w	r2, r3, #4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_UART_IRQHandler+0x11c>
 80063f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2204      	movs	r2, #4
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640e:	f043 0202 	orr.w	r2, r3, #2
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d105      	bne.n	800643c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006434:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2208      	movs	r2, #8
 8006442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644a:	f043 0208 	orr.w	r2, r3, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <HAL_UART_IRQHandler+0x18a>
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 820a 	beq.w	80068a6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d005      	beq.n	80064de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d04f      	beq.n	800657e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fef2 	bl	80072c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d141      	bne.n	8006576 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800650c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800651e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800652a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d9      	bne.n	80064f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	4a13      	ldr	r2, [pc, #76]	; (8006598 <HAL_UART_IRQHandler+0x29c>)
 800654c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006552:	4618      	mov	r0, r3
 8006554:	f7fb fda1 	bl	800209a <HAL_DMA_Abort_IT>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d017      	beq.n	800658e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e00f      	b.n	800658e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9ae 	bl	80068d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e00b      	b.n	800658e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9aa 	bl	80068d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	e007      	b.n	800658e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9a6 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800658c:	e18b      	b.n	80068a6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658e:	bf00      	nop
    return;
 8006590:	e189      	b.n	80068a6 <HAL_UART_IRQHandler+0x5aa>
 8006592:	bf00      	nop
 8006594:	04000120 	.word	0x04000120
 8006598:	0800738f 	.word	0x0800738f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 8144 	bne.w	800682e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 813d 	beq.w	800682e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8136 	beq.w	800682e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2210      	movs	r2, #16
 80065c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	f040 80b2 	bne.w	800673e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 815d 	beq.w	80068aa <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065fa:	429a      	cmp	r2, r3
 80065fc:	f080 8155 	bcs.w	80068aa <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006614:	f000 8085 	beq.w	8006722 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800662c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006646:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800664e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800665a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1da      	bne.n	8006618 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006686:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800668a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800668e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e1      	bne.n	8006662 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e3      	bne.n	800669e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006704:	65bb      	str	r3, [r7, #88]	; 0x58
 8006706:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800670a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e4      	bne.n	80066e2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671c:	4618      	mov	r0, r3
 800671e:	f7fb fc4c 	bl	8001fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800672e:	b29b      	uxth	r3, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8d4 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800673c:	e0b5      	b.n	80068aa <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800674a:	b29b      	uxth	r3, r3
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a7 	beq.w	80068ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80a2 	beq.w	80068ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800678c:	647b      	str	r3, [r7, #68]	; 0x44
 800678e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e4      	bne.n	800676a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	623b      	str	r3, [r7, #32]
   return(result);
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067c4:	633a      	str	r2, [r7, #48]	; 0x30
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e3      	bne.n	80067a0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0310 	bic.w	r3, r3, #16
 80067fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	69b9      	ldr	r1, [r7, #24]
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	617b      	str	r3, [r7, #20]
   return(result);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e4      	bne.n	80067ea <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f85c 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800682c:	e03f      	b.n	80068ae <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <HAL_UART_IRQHandler+0x55c>
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800684e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f853 	bl	80068fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006856:	e02d      	b.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00e      	beq.n	8006882 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01c      	beq.n	80068b2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
    }
    return;
 8006880:	e017      	b.n	80068b2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	d012      	beq.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fd8d 	bl	80073ba <UART_EndTransmit_IT>
    return;
 80068a0:	e008      	b.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80068a2:	bf00      	nop
 80068a4:	e006      	b.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80068a6:	bf00      	nop
 80068a8:	e004      	b.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80068b2:	bf00      	nop
  }

}
 80068b4:	37e8      	adds	r7, #232	; 0xe8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop

080068bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4ba7      	ldr	r3, [pc, #668]	; (8006bd8 <UART_SetConfig+0x2c8>)
 800693c:	4013      	ands	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	6979      	ldr	r1, [r7, #20]
 8006944:	430b      	orrs	r3, r1
 8006946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	430a      	orrs	r2, r1
 8006980:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a95      	ldr	r2, [pc, #596]	; (8006bdc <UART_SetConfig+0x2cc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d120      	bne.n	80069ce <UART_SetConfig+0xbe>
 800698c:	4b94      	ldr	r3, [pc, #592]	; (8006be0 <UART_SetConfig+0x2d0>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b03      	cmp	r3, #3
 8006998:	d816      	bhi.n	80069c8 <UART_SetConfig+0xb8>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <UART_SetConfig+0x90>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069b1 	.word	0x080069b1
 80069a4:	080069bd 	.word	0x080069bd
 80069a8:	080069b7 	.word	0x080069b7
 80069ac:	080069c3 	.word	0x080069c3
 80069b0:	2301      	movs	r3, #1
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e14f      	b.n	8006c56 <UART_SetConfig+0x346>
 80069b6:	2302      	movs	r3, #2
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e14c      	b.n	8006c56 <UART_SetConfig+0x346>
 80069bc:	2304      	movs	r3, #4
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e149      	b.n	8006c56 <UART_SetConfig+0x346>
 80069c2:	2308      	movs	r3, #8
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e146      	b.n	8006c56 <UART_SetConfig+0x346>
 80069c8:	2310      	movs	r3, #16
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e143      	b.n	8006c56 <UART_SetConfig+0x346>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a84      	ldr	r2, [pc, #528]	; (8006be4 <UART_SetConfig+0x2d4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d132      	bne.n	8006a3e <UART_SetConfig+0x12e>
 80069d8:	4b81      	ldr	r3, [pc, #516]	; (8006be0 <UART_SetConfig+0x2d0>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	f003 030c 	and.w	r3, r3, #12
 80069e2:	2b0c      	cmp	r3, #12
 80069e4:	d828      	bhi.n	8006a38 <UART_SetConfig+0x128>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <UART_SetConfig+0xdc>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a21 	.word	0x08006a21
 80069f0:	08006a39 	.word	0x08006a39
 80069f4:	08006a39 	.word	0x08006a39
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a39 	.word	0x08006a39
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a39 	.word	0x08006a39
 8006a0c:	08006a27 	.word	0x08006a27
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a39 	.word	0x08006a39
 8006a1c:	08006a33 	.word	0x08006a33
 8006a20:	2300      	movs	r3, #0
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e117      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a26:	2302      	movs	r3, #2
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e114      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e111      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a32:	2308      	movs	r3, #8
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e10e      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e10b      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a69      	ldr	r2, [pc, #420]	; (8006be8 <UART_SetConfig+0x2d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d120      	bne.n	8006a8a <UART_SetConfig+0x17a>
 8006a48:	4b65      	ldr	r3, [pc, #404]	; (8006be0 <UART_SetConfig+0x2d0>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a52:	2b30      	cmp	r3, #48	; 0x30
 8006a54:	d013      	beq.n	8006a7e <UART_SetConfig+0x16e>
 8006a56:	2b30      	cmp	r3, #48	; 0x30
 8006a58:	d814      	bhi.n	8006a84 <UART_SetConfig+0x174>
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d009      	beq.n	8006a72 <UART_SetConfig+0x162>
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d810      	bhi.n	8006a84 <UART_SetConfig+0x174>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <UART_SetConfig+0x15c>
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	d006      	beq.n	8006a78 <UART_SetConfig+0x168>
 8006a6a:	e00b      	b.n	8006a84 <UART_SetConfig+0x174>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e0f1      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a72:	2302      	movs	r3, #2
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e0ee      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e0eb      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a7e:	2308      	movs	r3, #8
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	e0e8      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a84:	2310      	movs	r3, #16
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0e5      	b.n	8006c56 <UART_SetConfig+0x346>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a57      	ldr	r2, [pc, #348]	; (8006bec <UART_SetConfig+0x2dc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d120      	bne.n	8006ad6 <UART_SetConfig+0x1c6>
 8006a94:	4b52      	ldr	r3, [pc, #328]	; (8006be0 <UART_SetConfig+0x2d0>)
 8006a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa0:	d013      	beq.n	8006aca <UART_SetConfig+0x1ba>
 8006aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa4:	d814      	bhi.n	8006ad0 <UART_SetConfig+0x1c0>
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d009      	beq.n	8006abe <UART_SetConfig+0x1ae>
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d810      	bhi.n	8006ad0 <UART_SetConfig+0x1c0>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <UART_SetConfig+0x1a8>
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d006      	beq.n	8006ac4 <UART_SetConfig+0x1b4>
 8006ab6:	e00b      	b.n	8006ad0 <UART_SetConfig+0x1c0>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e0cb      	b.n	8006c56 <UART_SetConfig+0x346>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e0c8      	b.n	8006c56 <UART_SetConfig+0x346>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e0c5      	b.n	8006c56 <UART_SetConfig+0x346>
 8006aca:	2308      	movs	r3, #8
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e0c2      	b.n	8006c56 <UART_SetConfig+0x346>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e0bf      	b.n	8006c56 <UART_SetConfig+0x346>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a45      	ldr	r2, [pc, #276]	; (8006bf0 <UART_SetConfig+0x2e0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d125      	bne.n	8006b2c <UART_SetConfig+0x21c>
 8006ae0:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <UART_SetConfig+0x2d0>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aee:	d017      	beq.n	8006b20 <UART_SetConfig+0x210>
 8006af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006af4:	d817      	bhi.n	8006b26 <UART_SetConfig+0x216>
 8006af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afa:	d00b      	beq.n	8006b14 <UART_SetConfig+0x204>
 8006afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b00:	d811      	bhi.n	8006b26 <UART_SetConfig+0x216>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <UART_SetConfig+0x1fe>
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0a:	d006      	beq.n	8006b1a <UART_SetConfig+0x20a>
 8006b0c:	e00b      	b.n	8006b26 <UART_SetConfig+0x216>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e0a0      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b14:	2302      	movs	r3, #2
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e09d      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e09a      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b20:	2308      	movs	r3, #8
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e097      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b26:	2310      	movs	r3, #16
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e094      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a30      	ldr	r2, [pc, #192]	; (8006bf4 <UART_SetConfig+0x2e4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d125      	bne.n	8006b82 <UART_SetConfig+0x272>
 8006b36:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <UART_SetConfig+0x2d0>)
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b44:	d017      	beq.n	8006b76 <UART_SetConfig+0x266>
 8006b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b4a:	d817      	bhi.n	8006b7c <UART_SetConfig+0x26c>
 8006b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b50:	d00b      	beq.n	8006b6a <UART_SetConfig+0x25a>
 8006b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b56:	d811      	bhi.n	8006b7c <UART_SetConfig+0x26c>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <UART_SetConfig+0x254>
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b60:	d006      	beq.n	8006b70 <UART_SetConfig+0x260>
 8006b62:	e00b      	b.n	8006b7c <UART_SetConfig+0x26c>
 8006b64:	2301      	movs	r3, #1
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e075      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e072      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b70:	2304      	movs	r3, #4
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e06f      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b76:	2308      	movs	r3, #8
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e06c      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e069      	b.n	8006c56 <UART_SetConfig+0x346>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <UART_SetConfig+0x2e8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d137      	bne.n	8006bfc <UART_SetConfig+0x2ec>
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <UART_SetConfig+0x2d0>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b9a:	d017      	beq.n	8006bcc <UART_SetConfig+0x2bc>
 8006b9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ba0:	d817      	bhi.n	8006bd2 <UART_SetConfig+0x2c2>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d00b      	beq.n	8006bc0 <UART_SetConfig+0x2b0>
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bac:	d811      	bhi.n	8006bd2 <UART_SetConfig+0x2c2>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <UART_SetConfig+0x2aa>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	d006      	beq.n	8006bc6 <UART_SetConfig+0x2b6>
 8006bb8:	e00b      	b.n	8006bd2 <UART_SetConfig+0x2c2>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e04a      	b.n	8006c56 <UART_SetConfig+0x346>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e047      	b.n	8006c56 <UART_SetConfig+0x346>
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e044      	b.n	8006c56 <UART_SetConfig+0x346>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e041      	b.n	8006c56 <UART_SetConfig+0x346>
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e03e      	b.n	8006c56 <UART_SetConfig+0x346>
 8006bd8:	efff69f3 	.word	0xefff69f3
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	40004c00 	.word	0x40004c00
 8006bf0:	40005000 	.word	0x40005000
 8006bf4:	40011400 	.word	0x40011400
 8006bf8:	40007800 	.word	0x40007800
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a71      	ldr	r2, [pc, #452]	; (8006dc8 <UART_SetConfig+0x4b8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d125      	bne.n	8006c52 <UART_SetConfig+0x342>
 8006c06:	4b71      	ldr	r3, [pc, #452]	; (8006dcc <UART_SetConfig+0x4bc>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c14:	d017      	beq.n	8006c46 <UART_SetConfig+0x336>
 8006c16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c1a:	d817      	bhi.n	8006c4c <UART_SetConfig+0x33c>
 8006c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c20:	d00b      	beq.n	8006c3a <UART_SetConfig+0x32a>
 8006c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c26:	d811      	bhi.n	8006c4c <UART_SetConfig+0x33c>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <UART_SetConfig+0x324>
 8006c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c30:	d006      	beq.n	8006c40 <UART_SetConfig+0x330>
 8006c32:	e00b      	b.n	8006c4c <UART_SetConfig+0x33c>
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e00d      	b.n	8006c56 <UART_SetConfig+0x346>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e00a      	b.n	8006c56 <UART_SetConfig+0x346>
 8006c40:	2304      	movs	r3, #4
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e007      	b.n	8006c56 <UART_SetConfig+0x346>
 8006c46:	2308      	movs	r3, #8
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e004      	b.n	8006c56 <UART_SetConfig+0x346>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e001      	b.n	8006c56 <UART_SetConfig+0x346>
 8006c52:	2310      	movs	r3, #16
 8006c54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5e:	d15a      	bne.n	8006d16 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006c60:	7ffb      	ldrb	r3, [r7, #31]
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d827      	bhi.n	8006cb6 <UART_SetConfig+0x3a6>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0x35c>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006c99 	.word	0x08006c99
 8006c74:	08006ca1 	.word	0x08006ca1
 8006c78:	08006cb7 	.word	0x08006cb7
 8006c7c:	08006ca7 	.word	0x08006ca7
 8006c80:	08006cb7 	.word	0x08006cb7
 8006c84:	08006cb7 	.word	0x08006cb7
 8006c88:	08006cb7 	.word	0x08006cb7
 8006c8c:	08006caf 	.word	0x08006caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fd fbf8 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 8006c94:	61b8      	str	r0, [r7, #24]
        break;
 8006c96:	e013      	b.n	8006cc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c98:	f7fd fc08 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8006c9c:	61b8      	str	r0, [r7, #24]
        break;
 8006c9e:	e00f      	b.n	8006cc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca0:	4b4b      	ldr	r3, [pc, #300]	; (8006dd0 <UART_SetConfig+0x4c0>)
 8006ca2:	61bb      	str	r3, [r7, #24]
        break;
 8006ca4:	e00c      	b.n	8006cc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca6:	f7fd faff 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8006caa:	61b8      	str	r0, [r7, #24]
        break;
 8006cac:	e008      	b.n	8006cc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb2:	61bb      	str	r3, [r7, #24]
        break;
 8006cb4:	e004      	b.n	8006cc0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8006cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d074      	beq.n	8006db0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	005a      	lsls	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	085b      	lsrs	r3, r3, #1
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d916      	bls.n	8006d10 <UART_SetConfig+0x400>
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce8:	d212      	bcs.n	8006d10 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f023 030f 	bic.w	r3, r3, #15
 8006cf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	89fb      	ldrh	r3, [r7, #14]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	89fa      	ldrh	r2, [r7, #14]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	e04f      	b.n	8006db0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77bb      	strb	r3, [r7, #30]
 8006d14:	e04c      	b.n	8006db0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d16:	7ffb      	ldrb	r3, [r7, #31]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d828      	bhi.n	8006d6e <UART_SetConfig+0x45e>
 8006d1c:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <UART_SetConfig+0x414>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d51 	.word	0x08006d51
 8006d2c:	08006d59 	.word	0x08006d59
 8006d30:	08006d6f 	.word	0x08006d6f
 8006d34:	08006d5f 	.word	0x08006d5f
 8006d38:	08006d6f 	.word	0x08006d6f
 8006d3c:	08006d6f 	.word	0x08006d6f
 8006d40:	08006d6f 	.word	0x08006d6f
 8006d44:	08006d67 	.word	0x08006d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d48:	f7fd fb9c 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 8006d4c:	61b8      	str	r0, [r7, #24]
        break;
 8006d4e:	e013      	b.n	8006d78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d50:	f7fd fbac 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8006d54:	61b8      	str	r0, [r7, #24]
        break;
 8006d56:	e00f      	b.n	8006d78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <UART_SetConfig+0x4c0>)
 8006d5a:	61bb      	str	r3, [r7, #24]
        break;
 8006d5c:	e00c      	b.n	8006d78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5e:	f7fd faa3 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8006d62:	61b8      	str	r0, [r7, #24]
        break;
 8006d64:	e008      	b.n	8006d78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6a:	61bb      	str	r3, [r7, #24]
        break;
 8006d6c:	e004      	b.n	8006d78 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	77bb      	strb	r3, [r7, #30]
        break;
 8006d76:	bf00      	nop
    }

    if (pclk != 0U)
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	085a      	lsrs	r2, r3, #1
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	441a      	add	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b0f      	cmp	r3, #15
 8006d96:	d909      	bls.n	8006dac <UART_SetConfig+0x49c>
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d205      	bcs.n	8006dac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	e001      	b.n	8006db0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40007c00 	.word	0x40007c00
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	00f42400 	.word	0x00f42400

08006dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01a      	beq.n	8006eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed2:	d10a      	bne.n	8006eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	605a      	str	r2, [r3, #4]
  }
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f28:	f7fa ff06 	bl	8001d38 <HAL_GetTick>
 8006f2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d10e      	bne.n	8006f5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f82d 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e023      	b.n	8006fa2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d10e      	bne.n	8006f86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f817 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e00d      	b.n	8006fa2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b09c      	sub	sp, #112	; 0x70
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fba:	e0a5      	b.n	8007108 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	f000 80a1 	beq.w	8007108 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fa feb7 	bl	8001d38 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x32>
 8006fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d13e      	bne.n	800705a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ffc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	663b      	str	r3, [r7, #96]	; 0x60
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800702e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800703c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e067      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d04f      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007076:	d147      	bne.n	8007108 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007080:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
 80070a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e6      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	613b      	str	r3, [r7, #16]
   return(result);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3308      	adds	r3, #8
 80070d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070d4:	623a      	str	r2, [r7, #32]
 80070d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	69f9      	ldr	r1, [r7, #28]
 80070da:	6a3a      	ldr	r2, [r7, #32]
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e5      	bne.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e010      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69da      	ldr	r2, [r3, #28]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	429a      	cmp	r2, r3
 8007124:	f43f af4a 	beq.w	8006fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3770      	adds	r7, #112	; 0x70
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007134:	b480      	push	{r7}
 8007136:	b097      	sub	sp, #92	; 0x5c
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	d10e      	bne.n	8007186 <UART_Start_Receive_IT+0x52>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <UART_Start_Receive_IT+0x48>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007176:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800717a:	e02d      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	22ff      	movs	r2, #255	; 0xff
 8007180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007184:	e028      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10d      	bne.n	80071aa <UART_Start_Receive_IT+0x76>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <UART_Start_Receive_IT+0x6c>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	; 0xff
 800719a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800719e:	e01b      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	227f      	movs	r2, #127	; 0x7f
 80071a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071a8:	e016      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b2:	d10d      	bne.n	80071d0 <UART_Start_Receive_IT+0x9c>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <UART_Start_Receive_IT+0x92>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	227f      	movs	r2, #127	; 0x7f
 80071c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c4:	e008      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	223f      	movs	r2, #63	; 0x3f
 80071ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ce:	e003      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2222      	movs	r2, #34	; 0x22
 80071e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	657b      	str	r3, [r7, #84]	; 0x54
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007206:	64ba      	str	r2, [r7, #72]	; 0x48
 8007208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800720c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d107      	bne.n	8007234 <UART_Start_Receive_IT+0x100>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <UART_Start_Receive_IT+0x18c>)
 8007230:	665a      	str	r2, [r3, #100]	; 0x64
 8007232:	e002      	b.n	800723a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a23      	ldr	r2, [pc, #140]	; (80072c4 <UART_Start_Receive_IT+0x190>)
 8007238:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d019      	beq.n	800727e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800725e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
 800726a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800726e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e6      	bne.n	800724a <UART_Start_Receive_IT+0x116>
 800727c:	e018      	b.n	80072b0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	613b      	str	r3, [r7, #16]
   return(result);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f043 0320 	orr.w	r3, r3, #32
 8007292:	653b      	str	r3, [r7, #80]	; 0x50
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729c:	623b      	str	r3, [r7, #32]
 800729e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	69f9      	ldr	r1, [r7, #28]
 80072a2:	6a3a      	ldr	r2, [r7, #32]
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	375c      	adds	r7, #92	; 0x5c
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	0800756b 	.word	0x0800756b
 80072c4:	0800740f 	.word	0x0800740f

080072c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b095      	sub	sp, #84	; 0x54
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ee:	643b      	str	r3, [r7, #64]	; 0x40
 80072f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e6      	bne.n	80072d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	61fb      	str	r3, [r7, #28]
   return(result);
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	64bb      	str	r3, [r7, #72]	; 0x48
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733a:	2b01      	cmp	r3, #1
 800733c:	d118      	bne.n	8007370 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	60bb      	str	r3, [r7, #8]
   return(result);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6979      	ldr	r1, [r7, #20]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e6      	bne.n	800733e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007382:	bf00      	nop
 8007384:	3754      	adds	r7, #84	; 0x54
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff fa8f 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b088      	sub	sp, #32
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	613b      	str	r3, [r7, #16]
   return(result);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fa5b 	bl	80068bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007406:	bf00      	nop
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b096      	sub	sp, #88	; 0x58
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800741c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007424:	2b22      	cmp	r3, #34	; 0x22
 8007426:	f040 8094 	bne.w	8007552 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007434:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007438:	b2d9      	uxtb	r1, r3
 800743a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800743e:	b2da      	uxtb	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	400a      	ands	r2, r1
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800745a:	b29b      	uxth	r3, r3
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d177      	bne.n	8007562 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007486:	653b      	str	r3, [r7, #80]	; 0x50
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007490:	647b      	str	r3, [r7, #68]	; 0x44
 8007492:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e6      	bne.n	8007472 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	623b      	str	r3, [r7, #32]
   return(result);
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3308      	adds	r3, #8
 80074c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074c4:	633a      	str	r2, [r7, #48]	; 0x30
 80074c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e5      	bne.n	80074a4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d12e      	bne.n	800754a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0310 	bic.w	r3, r3, #16
 8007506:	64bb      	str	r3, [r7, #72]	; 0x48
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	69b9      	ldr	r1, [r7, #24]
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	617b      	str	r3, [r7, #20]
   return(result);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e6      	bne.n	80074f2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b10      	cmp	r3, #16
 8007530:	d103      	bne.n	800753a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2210      	movs	r2, #16
 8007538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f9ce 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007548:	e00b      	b.n	8007562 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7f9 fc72 	bl	8000e34 <HAL_UART_RxCpltCallback>
}
 8007550:	e007      	b.n	8007562 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0208 	orr.w	r2, r2, #8
 8007560:	619a      	str	r2, [r3, #24]
}
 8007562:	bf00      	nop
 8007564:	3758      	adds	r7, #88	; 0x58
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b096      	sub	sp, #88	; 0x58
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007578:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007580:	2b22      	cmp	r3, #34	; 0x22
 8007582:	f040 8094 	bne.w	80076ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007596:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800759a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800759e:	4013      	ands	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	1c9a      	adds	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d177      	bne.n	80076be <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ec:	643b      	str	r3, [r7, #64]	; 0x40
 80075ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e6      	bne.n	80075ce <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	2b01      	cmp	r3, #1
 8007646:	d12e      	bne.n	80076a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	60bb      	str	r3, [r7, #8]
   return(result);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 0310 	bic.w	r3, r3, #16
 8007662:	647b      	str	r3, [r7, #68]	; 0x44
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	613b      	str	r3, [r7, #16]
   return(result);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e6      	bne.n	800764e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b10      	cmp	r3, #16
 800768c:	d103      	bne.n	8007696 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2210      	movs	r2, #16
 8007694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff f920 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a4:	e00b      	b.n	80076be <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7f9 fbc4 	bl	8000e34 <HAL_UART_RxCpltCallback>
}
 80076ac:	e007      	b.n	80076be <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0208 	orr.w	r2, r2, #8
 80076bc:	619a      	str	r2, [r3, #24]
}
 80076be:	bf00      	nop
 80076c0:	3758      	adds	r7, #88	; 0x58
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <__errno>:
 80076c8:	4b01      	ldr	r3, [pc, #4]	; (80076d0 <__errno+0x8>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	2000013c 	.word	0x2000013c

080076d4 <__libc_init_array>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4d0d      	ldr	r5, [pc, #52]	; (800770c <__libc_init_array+0x38>)
 80076d8:	4c0d      	ldr	r4, [pc, #52]	; (8007710 <__libc_init_array+0x3c>)
 80076da:	1b64      	subs	r4, r4, r5
 80076dc:	10a4      	asrs	r4, r4, #2
 80076de:	2600      	movs	r6, #0
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	d109      	bne.n	80076f8 <__libc_init_array+0x24>
 80076e4:	4d0b      	ldr	r5, [pc, #44]	; (8007714 <__libc_init_array+0x40>)
 80076e6:	4c0c      	ldr	r4, [pc, #48]	; (8007718 <__libc_init_array+0x44>)
 80076e8:	f001 f912 	bl	8008910 <_init>
 80076ec:	1b64      	subs	r4, r4, r5
 80076ee:	10a4      	asrs	r4, r4, #2
 80076f0:	2600      	movs	r6, #0
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d105      	bne.n	8007702 <__libc_init_array+0x2e>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fc:	4798      	blx	r3
 80076fe:	3601      	adds	r6, #1
 8007700:	e7ee      	b.n	80076e0 <__libc_init_array+0xc>
 8007702:	f855 3b04 	ldr.w	r3, [r5], #4
 8007706:	4798      	blx	r3
 8007708:	3601      	adds	r6, #1
 800770a:	e7f2      	b.n	80076f2 <__libc_init_array+0x1e>
 800770c:	08008b7c 	.word	0x08008b7c
 8007710:	08008b7c 	.word	0x08008b7c
 8007714:	08008b7c 	.word	0x08008b7c
 8007718:	08008b80 	.word	0x08008b80

0800771c <memset>:
 800771c:	4402      	add	r2, r0
 800771e:	4603      	mov	r3, r0
 8007720:	4293      	cmp	r3, r2
 8007722:	d100      	bne.n	8007726 <memset+0xa>
 8007724:	4770      	bx	lr
 8007726:	f803 1b01 	strb.w	r1, [r3], #1
 800772a:	e7f9      	b.n	8007720 <memset+0x4>

0800772c <siprintf>:
 800772c:	b40e      	push	{r1, r2, r3}
 800772e:	b500      	push	{lr}
 8007730:	b09c      	sub	sp, #112	; 0x70
 8007732:	ab1d      	add	r3, sp, #116	; 0x74
 8007734:	9002      	str	r0, [sp, #8]
 8007736:	9006      	str	r0, [sp, #24]
 8007738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800773c:	4809      	ldr	r0, [pc, #36]	; (8007764 <siprintf+0x38>)
 800773e:	9107      	str	r1, [sp, #28]
 8007740:	9104      	str	r1, [sp, #16]
 8007742:	4909      	ldr	r1, [pc, #36]	; (8007768 <siprintf+0x3c>)
 8007744:	f853 2b04 	ldr.w	r2, [r3], #4
 8007748:	9105      	str	r1, [sp, #20]
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	a902      	add	r1, sp, #8
 8007750:	f000 f896 	bl	8007880 <_svfiprintf_r>
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	b01c      	add	sp, #112	; 0x70
 800775c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007760:	b003      	add	sp, #12
 8007762:	4770      	bx	lr
 8007764:	2000013c 	.word	0x2000013c
 8007768:	ffff0208 	.word	0xffff0208

0800776c <siscanf>:
 800776c:	b40e      	push	{r1, r2, r3}
 800776e:	b510      	push	{r4, lr}
 8007770:	b09f      	sub	sp, #124	; 0x7c
 8007772:	ac21      	add	r4, sp, #132	; 0x84
 8007774:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007778:	f854 2b04 	ldr.w	r2, [r4], #4
 800777c:	9201      	str	r2, [sp, #4]
 800777e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007782:	9004      	str	r0, [sp, #16]
 8007784:	9008      	str	r0, [sp, #32]
 8007786:	f7f8 fd5b 	bl	8000240 <strlen>
 800778a:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <siscanf+0x50>)
 800778c:	9005      	str	r0, [sp, #20]
 800778e:	9009      	str	r0, [sp, #36]	; 0x24
 8007790:	930d      	str	r3, [sp, #52]	; 0x34
 8007792:	480b      	ldr	r0, [pc, #44]	; (80077c0 <siscanf+0x54>)
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	6800      	ldr	r0, [r0, #0]
 8007798:	9403      	str	r4, [sp, #12]
 800779a:	2300      	movs	r3, #0
 800779c:	9311      	str	r3, [sp, #68]	; 0x44
 800779e:	9316      	str	r3, [sp, #88]	; 0x58
 80077a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	4623      	mov	r3, r4
 80077ac:	f000 f9c2 	bl	8007b34 <__ssvfiscanf_r>
 80077b0:	b01f      	add	sp, #124	; 0x7c
 80077b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b6:	b003      	add	sp, #12
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	080077c5 	.word	0x080077c5
 80077c0:	2000013c 	.word	0x2000013c

080077c4 <__seofread>:
 80077c4:	2000      	movs	r0, #0
 80077c6:	4770      	bx	lr

080077c8 <__ssputs_r>:
 80077c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077cc:	688e      	ldr	r6, [r1, #8]
 80077ce:	429e      	cmp	r6, r3
 80077d0:	4682      	mov	sl, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4690      	mov	r8, r2
 80077d6:	461f      	mov	r7, r3
 80077d8:	d838      	bhi.n	800784c <__ssputs_r+0x84>
 80077da:	898a      	ldrh	r2, [r1, #12]
 80077dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077e0:	d032      	beq.n	8007848 <__ssputs_r+0x80>
 80077e2:	6825      	ldr	r5, [r4, #0]
 80077e4:	6909      	ldr	r1, [r1, #16]
 80077e6:	eba5 0901 	sub.w	r9, r5, r1
 80077ea:	6965      	ldr	r5, [r4, #20]
 80077ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077f4:	3301      	adds	r3, #1
 80077f6:	444b      	add	r3, r9
 80077f8:	106d      	asrs	r5, r5, #1
 80077fa:	429d      	cmp	r5, r3
 80077fc:	bf38      	it	cc
 80077fe:	461d      	movcc	r5, r3
 8007800:	0553      	lsls	r3, r2, #21
 8007802:	d531      	bpl.n	8007868 <__ssputs_r+0xa0>
 8007804:	4629      	mov	r1, r5
 8007806:	f000 ffdf 	bl	80087c8 <_malloc_r>
 800780a:	4606      	mov	r6, r0
 800780c:	b950      	cbnz	r0, 8007824 <__ssputs_r+0x5c>
 800780e:	230c      	movs	r3, #12
 8007810:	f8ca 3000 	str.w	r3, [sl]
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	6921      	ldr	r1, [r4, #16]
 8007826:	464a      	mov	r2, r9
 8007828:	f000 ff56 	bl	80086d8 <memcpy>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	6126      	str	r6, [r4, #16]
 800783a:	6165      	str	r5, [r4, #20]
 800783c:	444e      	add	r6, r9
 800783e:	eba5 0509 	sub.w	r5, r5, r9
 8007842:	6026      	str	r6, [r4, #0]
 8007844:	60a5      	str	r5, [r4, #8]
 8007846:	463e      	mov	r6, r7
 8007848:	42be      	cmp	r6, r7
 800784a:	d900      	bls.n	800784e <__ssputs_r+0x86>
 800784c:	463e      	mov	r6, r7
 800784e:	4632      	mov	r2, r6
 8007850:	6820      	ldr	r0, [r4, #0]
 8007852:	4641      	mov	r1, r8
 8007854:	f000 ff4e 	bl	80086f4 <memmove>
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	1b9b      	subs	r3, r3, r6
 800785e:	4432      	add	r2, r6
 8007860:	60a3      	str	r3, [r4, #8]
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	2000      	movs	r0, #0
 8007866:	e7db      	b.n	8007820 <__ssputs_r+0x58>
 8007868:	462a      	mov	r2, r5
 800786a:	f001 f807 	bl	800887c <_realloc_r>
 800786e:	4606      	mov	r6, r0
 8007870:	2800      	cmp	r0, #0
 8007872:	d1e1      	bne.n	8007838 <__ssputs_r+0x70>
 8007874:	6921      	ldr	r1, [r4, #16]
 8007876:	4650      	mov	r0, sl
 8007878:	f000 ff56 	bl	8008728 <_free_r>
 800787c:	e7c7      	b.n	800780e <__ssputs_r+0x46>
	...

08007880 <_svfiprintf_r>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	4698      	mov	r8, r3
 8007886:	898b      	ldrh	r3, [r1, #12]
 8007888:	061b      	lsls	r3, r3, #24
 800788a:	b09d      	sub	sp, #116	; 0x74
 800788c:	4607      	mov	r7, r0
 800788e:	460d      	mov	r5, r1
 8007890:	4614      	mov	r4, r2
 8007892:	d50e      	bpl.n	80078b2 <_svfiprintf_r+0x32>
 8007894:	690b      	ldr	r3, [r1, #16]
 8007896:	b963      	cbnz	r3, 80078b2 <_svfiprintf_r+0x32>
 8007898:	2140      	movs	r1, #64	; 0x40
 800789a:	f000 ff95 	bl	80087c8 <_malloc_r>
 800789e:	6028      	str	r0, [r5, #0]
 80078a0:	6128      	str	r0, [r5, #16]
 80078a2:	b920      	cbnz	r0, 80078ae <_svfiprintf_r+0x2e>
 80078a4:	230c      	movs	r3, #12
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e0d1      	b.n	8007a52 <_svfiprintf_r+0x1d2>
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	616b      	str	r3, [r5, #20]
 80078b2:	2300      	movs	r3, #0
 80078b4:	9309      	str	r3, [sp, #36]	; 0x24
 80078b6:	2320      	movs	r3, #32
 80078b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80078c0:	2330      	movs	r3, #48	; 0x30
 80078c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a6c <_svfiprintf_r+0x1ec>
 80078c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ca:	f04f 0901 	mov.w	r9, #1
 80078ce:	4623      	mov	r3, r4
 80078d0:	469a      	mov	sl, r3
 80078d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d6:	b10a      	cbz	r2, 80078dc <_svfiprintf_r+0x5c>
 80078d8:	2a25      	cmp	r2, #37	; 0x25
 80078da:	d1f9      	bne.n	80078d0 <_svfiprintf_r+0x50>
 80078dc:	ebba 0b04 	subs.w	fp, sl, r4
 80078e0:	d00b      	beq.n	80078fa <_svfiprintf_r+0x7a>
 80078e2:	465b      	mov	r3, fp
 80078e4:	4622      	mov	r2, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff ff6d 	bl	80077c8 <__ssputs_r>
 80078ee:	3001      	adds	r0, #1
 80078f0:	f000 80aa 	beq.w	8007a48 <_svfiprintf_r+0x1c8>
 80078f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f6:	445a      	add	r2, fp
 80078f8:	9209      	str	r2, [sp, #36]	; 0x24
 80078fa:	f89a 3000 	ldrb.w	r3, [sl]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80a2 	beq.w	8007a48 <_svfiprintf_r+0x1c8>
 8007904:	2300      	movs	r3, #0
 8007906:	f04f 32ff 	mov.w	r2, #4294967295
 800790a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800790e:	f10a 0a01 	add.w	sl, sl, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800791a:	931a      	str	r3, [sp, #104]	; 0x68
 800791c:	4654      	mov	r4, sl
 800791e:	2205      	movs	r2, #5
 8007920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007924:	4851      	ldr	r0, [pc, #324]	; (8007a6c <_svfiprintf_r+0x1ec>)
 8007926:	f7f8 fc93 	bl	8000250 <memchr>
 800792a:	9a04      	ldr	r2, [sp, #16]
 800792c:	b9d8      	cbnz	r0, 8007966 <_svfiprintf_r+0xe6>
 800792e:	06d0      	lsls	r0, r2, #27
 8007930:	bf44      	itt	mi
 8007932:	2320      	movmi	r3, #32
 8007934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007938:	0711      	lsls	r1, r2, #28
 800793a:	bf44      	itt	mi
 800793c:	232b      	movmi	r3, #43	; 0x2b
 800793e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b2a      	cmp	r3, #42	; 0x2a
 8007948:	d015      	beq.n	8007976 <_svfiprintf_r+0xf6>
 800794a:	9a07      	ldr	r2, [sp, #28]
 800794c:	4654      	mov	r4, sl
 800794e:	2000      	movs	r0, #0
 8007950:	f04f 0c0a 	mov.w	ip, #10
 8007954:	4621      	mov	r1, r4
 8007956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800795a:	3b30      	subs	r3, #48	; 0x30
 800795c:	2b09      	cmp	r3, #9
 800795e:	d94e      	bls.n	80079fe <_svfiprintf_r+0x17e>
 8007960:	b1b0      	cbz	r0, 8007990 <_svfiprintf_r+0x110>
 8007962:	9207      	str	r2, [sp, #28]
 8007964:	e014      	b.n	8007990 <_svfiprintf_r+0x110>
 8007966:	eba0 0308 	sub.w	r3, r0, r8
 800796a:	fa09 f303 	lsl.w	r3, r9, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	46a2      	mov	sl, r4
 8007974:	e7d2      	b.n	800791c <_svfiprintf_r+0x9c>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	1d19      	adds	r1, r3, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	9103      	str	r1, [sp, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	bfbb      	ittet	lt
 8007982:	425b      	neglt	r3, r3
 8007984:	f042 0202 	orrlt.w	r2, r2, #2
 8007988:	9307      	strge	r3, [sp, #28]
 800798a:	9307      	strlt	r3, [sp, #28]
 800798c:	bfb8      	it	lt
 800798e:	9204      	strlt	r2, [sp, #16]
 8007990:	7823      	ldrb	r3, [r4, #0]
 8007992:	2b2e      	cmp	r3, #46	; 0x2e
 8007994:	d10c      	bne.n	80079b0 <_svfiprintf_r+0x130>
 8007996:	7863      	ldrb	r3, [r4, #1]
 8007998:	2b2a      	cmp	r3, #42	; 0x2a
 800799a:	d135      	bne.n	8007a08 <_svfiprintf_r+0x188>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	9203      	str	r2, [sp, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bfb8      	it	lt
 80079a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079ac:	3402      	adds	r4, #2
 80079ae:	9305      	str	r3, [sp, #20]
 80079b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a7c <_svfiprintf_r+0x1fc>
 80079b4:	7821      	ldrb	r1, [r4, #0]
 80079b6:	2203      	movs	r2, #3
 80079b8:	4650      	mov	r0, sl
 80079ba:	f7f8 fc49 	bl	8000250 <memchr>
 80079be:	b140      	cbz	r0, 80079d2 <_svfiprintf_r+0x152>
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	eba0 000a 	sub.w	r0, r0, sl
 80079c6:	fa03 f000 	lsl.w	r0, r3, r0
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	4303      	orrs	r3, r0
 80079ce:	3401      	adds	r4, #1
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d6:	4826      	ldr	r0, [pc, #152]	; (8007a70 <_svfiprintf_r+0x1f0>)
 80079d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079dc:	2206      	movs	r2, #6
 80079de:	f7f8 fc37 	bl	8000250 <memchr>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d038      	beq.n	8007a58 <_svfiprintf_r+0x1d8>
 80079e6:	4b23      	ldr	r3, [pc, #140]	; (8007a74 <_svfiprintf_r+0x1f4>)
 80079e8:	bb1b      	cbnz	r3, 8007a32 <_svfiprintf_r+0x1b2>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	3307      	adds	r3, #7
 80079ee:	f023 0307 	bic.w	r3, r3, #7
 80079f2:	3308      	adds	r3, #8
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	4433      	add	r3, r6
 80079fa:	9309      	str	r3, [sp, #36]	; 0x24
 80079fc:	e767      	b.n	80078ce <_svfiprintf_r+0x4e>
 80079fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a02:	460c      	mov	r4, r1
 8007a04:	2001      	movs	r0, #1
 8007a06:	e7a5      	b.n	8007954 <_svfiprintf_r+0xd4>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	3401      	adds	r4, #1
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f04f 0c0a 	mov.w	ip, #10
 8007a14:	4620      	mov	r0, r4
 8007a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a1a:	3a30      	subs	r2, #48	; 0x30
 8007a1c:	2a09      	cmp	r2, #9
 8007a1e:	d903      	bls.n	8007a28 <_svfiprintf_r+0x1a8>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0c5      	beq.n	80079b0 <_svfiprintf_r+0x130>
 8007a24:	9105      	str	r1, [sp, #20]
 8007a26:	e7c3      	b.n	80079b0 <_svfiprintf_r+0x130>
 8007a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e7f0      	b.n	8007a14 <_svfiprintf_r+0x194>
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	462a      	mov	r2, r5
 8007a38:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <_svfiprintf_r+0x1f8>)
 8007a3a:	a904      	add	r1, sp, #16
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f3af 8000 	nop.w
 8007a42:	1c42      	adds	r2, r0, #1
 8007a44:	4606      	mov	r6, r0
 8007a46:	d1d6      	bne.n	80079f6 <_svfiprintf_r+0x176>
 8007a48:	89ab      	ldrh	r3, [r5, #12]
 8007a4a:	065b      	lsls	r3, r3, #25
 8007a4c:	f53f af2c 	bmi.w	80078a8 <_svfiprintf_r+0x28>
 8007a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a52:	b01d      	add	sp, #116	; 0x74
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	ab03      	add	r3, sp, #12
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <_svfiprintf_r+0x1f8>)
 8007a60:	a904      	add	r1, sp, #16
 8007a62:	4638      	mov	r0, r7
 8007a64:	f000 fa4c 	bl	8007f00 <_printf_i>
 8007a68:	e7eb      	b.n	8007a42 <_svfiprintf_r+0x1c2>
 8007a6a:	bf00      	nop
 8007a6c:	080089c4 	.word	0x080089c4
 8007a70:	080089ce 	.word	0x080089ce
 8007a74:	00000000 	.word	0x00000000
 8007a78:	080077c9 	.word	0x080077c9
 8007a7c:	080089ca 	.word	0x080089ca

08007a80 <_sungetc_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	1c4b      	adds	r3, r1, #1
 8007a84:	4614      	mov	r4, r2
 8007a86:	d103      	bne.n	8007a90 <_sungetc_r+0x10>
 8007a88:	f04f 35ff 	mov.w	r5, #4294967295
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	8993      	ldrh	r3, [r2, #12]
 8007a92:	f023 0320 	bic.w	r3, r3, #32
 8007a96:	8193      	strh	r3, [r2, #12]
 8007a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9a:	6852      	ldr	r2, [r2, #4]
 8007a9c:	b2cd      	uxtb	r5, r1
 8007a9e:	b18b      	cbz	r3, 8007ac4 <_sungetc_r+0x44>
 8007aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	dd08      	ble.n	8007ab8 <_sungetc_r+0x38>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	1e5a      	subs	r2, r3, #1
 8007aaa:	6022      	str	r2, [r4, #0]
 8007aac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	e7e9      	b.n	8007a8c <_sungetc_r+0xc>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	f000 fdd1 	bl	8008660 <__submore>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d0f1      	beq.n	8007aa6 <_sungetc_r+0x26>
 8007ac2:	e7e1      	b.n	8007a88 <_sungetc_r+0x8>
 8007ac4:	6921      	ldr	r1, [r4, #16]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	b151      	cbz	r1, 8007ae0 <_sungetc_r+0x60>
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d208      	bcs.n	8007ae0 <_sungetc_r+0x60>
 8007ace:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007ad2:	42a9      	cmp	r1, r5
 8007ad4:	d104      	bne.n	8007ae0 <_sungetc_r+0x60>
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	3201      	adds	r2, #1
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	6062      	str	r2, [r4, #4]
 8007ade:	e7d5      	b.n	8007a8c <_sungetc_r+0xc>
 8007ae0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aea:	2303      	movs	r3, #3
 8007aec:	63a3      	str	r3, [r4, #56]	; 0x38
 8007aee:	4623      	mov	r3, r4
 8007af0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	2301      	movs	r3, #1
 8007af8:	e7dc      	b.n	8007ab4 <_sungetc_r+0x34>

08007afa <__ssrefill_r>:
 8007afa:	b510      	push	{r4, lr}
 8007afc:	460c      	mov	r4, r1
 8007afe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007b00:	b169      	cbz	r1, 8007b1e <__ssrefill_r+0x24>
 8007b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b06:	4299      	cmp	r1, r3
 8007b08:	d001      	beq.n	8007b0e <__ssrefill_r+0x14>
 8007b0a:	f000 fe0d 	bl	8008728 <_free_r>
 8007b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	2000      	movs	r0, #0
 8007b14:	6360      	str	r0, [r4, #52]	; 0x34
 8007b16:	b113      	cbz	r3, 8007b1e <__ssrefill_r+0x24>
 8007b18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f043 0320 	orr.w	r3, r3, #32
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b32:	e7f3      	b.n	8007b1c <__ssrefill_r+0x22>

08007b34 <__ssvfiscanf_r>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007b3e:	2100      	movs	r1, #0
 8007b40:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007b44:	49b2      	ldr	r1, [pc, #712]	; (8007e10 <__ssvfiscanf_r+0x2dc>)
 8007b46:	91a0      	str	r1, [sp, #640]	; 0x280
 8007b48:	f10d 0804 	add.w	r8, sp, #4
 8007b4c:	49b1      	ldr	r1, [pc, #708]	; (8007e14 <__ssvfiscanf_r+0x2e0>)
 8007b4e:	4fb2      	ldr	r7, [pc, #712]	; (8007e18 <__ssvfiscanf_r+0x2e4>)
 8007b50:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8007e1c <__ssvfiscanf_r+0x2e8>
 8007b54:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007b58:	4606      	mov	r6, r0
 8007b5a:	91a1      	str	r1, [sp, #644]	; 0x284
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	f892 a000 	ldrb.w	sl, [r2]
 8007b62:	f1ba 0f00 	cmp.w	sl, #0
 8007b66:	f000 8151 	beq.w	8007e0c <__ssvfiscanf_r+0x2d8>
 8007b6a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8007b6e:	f013 0308 	ands.w	r3, r3, #8
 8007b72:	f102 0501 	add.w	r5, r2, #1
 8007b76:	d019      	beq.n	8007bac <__ssvfiscanf_r+0x78>
 8007b78:	6863      	ldr	r3, [r4, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dd0f      	ble.n	8007b9e <__ssvfiscanf_r+0x6a>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	5cba      	ldrb	r2, [r7, r2]
 8007b84:	0712      	lsls	r2, r2, #28
 8007b86:	d401      	bmi.n	8007b8c <__ssvfiscanf_r+0x58>
 8007b88:	462a      	mov	r2, r5
 8007b8a:	e7e8      	b.n	8007b5e <__ssvfiscanf_r+0x2a>
 8007b8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b8e:	3201      	adds	r2, #1
 8007b90:	9245      	str	r2, [sp, #276]	; 0x114
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	3301      	adds	r3, #1
 8007b96:	3a01      	subs	r2, #1
 8007b98:	6062      	str	r2, [r4, #4]
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	e7ec      	b.n	8007b78 <__ssvfiscanf_r+0x44>
 8007b9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	4798      	blx	r3
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0e9      	beq.n	8007b7e <__ssvfiscanf_r+0x4a>
 8007baa:	e7ed      	b.n	8007b88 <__ssvfiscanf_r+0x54>
 8007bac:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8007bb0:	f040 8083 	bne.w	8007cba <__ssvfiscanf_r+0x186>
 8007bb4:	9341      	str	r3, [sp, #260]	; 0x104
 8007bb6:	9343      	str	r3, [sp, #268]	; 0x10c
 8007bb8:	7853      	ldrb	r3, [r2, #1]
 8007bba:	2b2a      	cmp	r3, #42	; 0x2a
 8007bbc:	bf02      	ittt	eq
 8007bbe:	2310      	moveq	r3, #16
 8007bc0:	1c95      	addeq	r5, r2, #2
 8007bc2:	9341      	streq	r3, [sp, #260]	; 0x104
 8007bc4:	220a      	movs	r2, #10
 8007bc6:	46ab      	mov	fp, r5
 8007bc8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007bcc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007bd0:	2b09      	cmp	r3, #9
 8007bd2:	d91d      	bls.n	8007c10 <__ssvfiscanf_r+0xdc>
 8007bd4:	4891      	ldr	r0, [pc, #580]	; (8007e1c <__ssvfiscanf_r+0x2e8>)
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	f7f8 fb3a 	bl	8000250 <memchr>
 8007bdc:	b140      	cbz	r0, 8007bf0 <__ssvfiscanf_r+0xbc>
 8007bde:	2301      	movs	r3, #1
 8007be0:	eba0 0009 	sub.w	r0, r0, r9
 8007be4:	fa03 f000 	lsl.w	r0, r3, r0
 8007be8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007bea:	4318      	orrs	r0, r3
 8007bec:	9041      	str	r0, [sp, #260]	; 0x104
 8007bee:	465d      	mov	r5, fp
 8007bf0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bf4:	2b78      	cmp	r3, #120	; 0x78
 8007bf6:	d806      	bhi.n	8007c06 <__ssvfiscanf_r+0xd2>
 8007bf8:	2b57      	cmp	r3, #87	; 0x57
 8007bfa:	d810      	bhi.n	8007c1e <__ssvfiscanf_r+0xea>
 8007bfc:	2b25      	cmp	r3, #37	; 0x25
 8007bfe:	d05c      	beq.n	8007cba <__ssvfiscanf_r+0x186>
 8007c00:	d856      	bhi.n	8007cb0 <__ssvfiscanf_r+0x17c>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d074      	beq.n	8007cf0 <__ssvfiscanf_r+0x1bc>
 8007c06:	2303      	movs	r3, #3
 8007c08:	9347      	str	r3, [sp, #284]	; 0x11c
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	9342      	str	r3, [sp, #264]	; 0x108
 8007c0e:	e081      	b.n	8007d14 <__ssvfiscanf_r+0x1e0>
 8007c10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007c12:	fb02 1303 	mla	r3, r2, r3, r1
 8007c16:	3b30      	subs	r3, #48	; 0x30
 8007c18:	9343      	str	r3, [sp, #268]	; 0x10c
 8007c1a:	465d      	mov	r5, fp
 8007c1c:	e7d3      	b.n	8007bc6 <__ssvfiscanf_r+0x92>
 8007c1e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007c22:	2a20      	cmp	r2, #32
 8007c24:	d8ef      	bhi.n	8007c06 <__ssvfiscanf_r+0xd2>
 8007c26:	a101      	add	r1, pc, #4	; (adr r1, 8007c2c <__ssvfiscanf_r+0xf8>)
 8007c28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c2c:	08007cff 	.word	0x08007cff
 8007c30:	08007c07 	.word	0x08007c07
 8007c34:	08007c07 	.word	0x08007c07
 8007c38:	08007d5d 	.word	0x08007d5d
 8007c3c:	08007c07 	.word	0x08007c07
 8007c40:	08007c07 	.word	0x08007c07
 8007c44:	08007c07 	.word	0x08007c07
 8007c48:	08007c07 	.word	0x08007c07
 8007c4c:	08007c07 	.word	0x08007c07
 8007c50:	08007c07 	.word	0x08007c07
 8007c54:	08007c07 	.word	0x08007c07
 8007c58:	08007d73 	.word	0x08007d73
 8007c5c:	08007d49 	.word	0x08007d49
 8007c60:	08007cb7 	.word	0x08007cb7
 8007c64:	08007cb7 	.word	0x08007cb7
 8007c68:	08007cb7 	.word	0x08007cb7
 8007c6c:	08007c07 	.word	0x08007c07
 8007c70:	08007d4d 	.word	0x08007d4d
 8007c74:	08007c07 	.word	0x08007c07
 8007c78:	08007c07 	.word	0x08007c07
 8007c7c:	08007c07 	.word	0x08007c07
 8007c80:	08007c07 	.word	0x08007c07
 8007c84:	08007d83 	.word	0x08007d83
 8007c88:	08007d55 	.word	0x08007d55
 8007c8c:	08007cf7 	.word	0x08007cf7
 8007c90:	08007c07 	.word	0x08007c07
 8007c94:	08007c07 	.word	0x08007c07
 8007c98:	08007d7f 	.word	0x08007d7f
 8007c9c:	08007c07 	.word	0x08007c07
 8007ca0:	08007d49 	.word	0x08007d49
 8007ca4:	08007c07 	.word	0x08007c07
 8007ca8:	08007c07 	.word	0x08007c07
 8007cac:	08007cff 	.word	0x08007cff
 8007cb0:	3b45      	subs	r3, #69	; 0x45
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d8a7      	bhi.n	8007c06 <__ssvfiscanf_r+0xd2>
 8007cb6:	2305      	movs	r3, #5
 8007cb8:	e02b      	b.n	8007d12 <__ssvfiscanf_r+0x1de>
 8007cba:	6863      	ldr	r3, [r4, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dd0d      	ble.n	8007cdc <__ssvfiscanf_r+0x1a8>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	4552      	cmp	r2, sl
 8007cc6:	f040 80a1 	bne.w	8007e0c <__ssvfiscanf_r+0x2d8>
 8007cca:	3301      	adds	r3, #1
 8007ccc:	6862      	ldr	r2, [r4, #4]
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	6062      	str	r2, [r4, #4]
 8007cd8:	9345      	str	r3, [sp, #276]	; 0x114
 8007cda:	e755      	b.n	8007b88 <__ssvfiscanf_r+0x54>
 8007cdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4798      	blx	r3
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d0eb      	beq.n	8007cc0 <__ssvfiscanf_r+0x18c>
 8007ce8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f040 8084 	bne.w	8007df8 <__ssvfiscanf_r+0x2c4>
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e086      	b.n	8007e04 <__ssvfiscanf_r+0x2d0>
 8007cf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007cf8:	f042 0220 	orr.w	r2, r2, #32
 8007cfc:	9241      	str	r2, [sp, #260]	; 0x104
 8007cfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d04:	9241      	str	r2, [sp, #260]	; 0x104
 8007d06:	2210      	movs	r2, #16
 8007d08:	2b6f      	cmp	r3, #111	; 0x6f
 8007d0a:	9242      	str	r2, [sp, #264]	; 0x108
 8007d0c:	bf34      	ite	cc
 8007d0e:	2303      	movcc	r3, #3
 8007d10:	2304      	movcs	r3, #4
 8007d12:	9347      	str	r3, [sp, #284]	; 0x11c
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	dd41      	ble.n	8007d9e <__ssvfiscanf_r+0x26a>
 8007d1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d1c:	0659      	lsls	r1, r3, #25
 8007d1e:	d404      	bmi.n	8007d2a <__ssvfiscanf_r+0x1f6>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	5cba      	ldrb	r2, [r7, r2]
 8007d26:	0712      	lsls	r2, r2, #28
 8007d28:	d440      	bmi.n	8007dac <__ssvfiscanf_r+0x278>
 8007d2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	dc4f      	bgt.n	8007dd0 <__ssvfiscanf_r+0x29c>
 8007d30:	466b      	mov	r3, sp
 8007d32:	4622      	mov	r2, r4
 8007d34:	a941      	add	r1, sp, #260	; 0x104
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 fa08 	bl	800814c <_scanf_chars>
 8007d3c:	2801      	cmp	r0, #1
 8007d3e:	d065      	beq.n	8007e0c <__ssvfiscanf_r+0x2d8>
 8007d40:	2802      	cmp	r0, #2
 8007d42:	f47f af21 	bne.w	8007b88 <__ssvfiscanf_r+0x54>
 8007d46:	e7cf      	b.n	8007ce8 <__ssvfiscanf_r+0x1b4>
 8007d48:	220a      	movs	r2, #10
 8007d4a:	e7dd      	b.n	8007d08 <__ssvfiscanf_r+0x1d4>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9342      	str	r3, [sp, #264]	; 0x108
 8007d50:	2303      	movs	r3, #3
 8007d52:	e7de      	b.n	8007d12 <__ssvfiscanf_r+0x1de>
 8007d54:	2308      	movs	r3, #8
 8007d56:	9342      	str	r3, [sp, #264]	; 0x108
 8007d58:	2304      	movs	r3, #4
 8007d5a:	e7da      	b.n	8007d12 <__ssvfiscanf_r+0x1de>
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	4640      	mov	r0, r8
 8007d60:	f000 fb40 	bl	80083e4 <__sccl>
 8007d64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d6a:	9341      	str	r3, [sp, #260]	; 0x104
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7cf      	b.n	8007d12 <__ssvfiscanf_r+0x1de>
 8007d72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d78:	9341      	str	r3, [sp, #260]	; 0x104
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e7c9      	b.n	8007d12 <__ssvfiscanf_r+0x1de>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e7c7      	b.n	8007d12 <__ssvfiscanf_r+0x1de>
 8007d82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007d84:	06c3      	lsls	r3, r0, #27
 8007d86:	f53f aeff 	bmi.w	8007b88 <__ssvfiscanf_r+0x54>
 8007d8a:	9b00      	ldr	r3, [sp, #0]
 8007d8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d8e:	1d19      	adds	r1, r3, #4
 8007d90:	9100      	str	r1, [sp, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	07c0      	lsls	r0, r0, #31
 8007d96:	bf4c      	ite	mi
 8007d98:	801a      	strhmi	r2, [r3, #0]
 8007d9a:	601a      	strpl	r2, [r3, #0]
 8007d9c:	e6f4      	b.n	8007b88 <__ssvfiscanf_r+0x54>
 8007d9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007da0:	4621      	mov	r1, r4
 8007da2:	4630      	mov	r0, r6
 8007da4:	4798      	blx	r3
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d0b7      	beq.n	8007d1a <__ssvfiscanf_r+0x1e6>
 8007daa:	e79d      	b.n	8007ce8 <__ssvfiscanf_r+0x1b4>
 8007dac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007dae:	3201      	adds	r2, #1
 8007db0:	9245      	str	r2, [sp, #276]	; 0x114
 8007db2:	6862      	ldr	r2, [r4, #4]
 8007db4:	3a01      	subs	r2, #1
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	6062      	str	r2, [r4, #4]
 8007dba:	dd02      	ble.n	8007dc2 <__ssvfiscanf_r+0x28e>
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	e7ae      	b.n	8007d20 <__ssvfiscanf_r+0x1ec>
 8007dc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4798      	blx	r3
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d0a8      	beq.n	8007d20 <__ssvfiscanf_r+0x1ec>
 8007dce:	e78b      	b.n	8007ce8 <__ssvfiscanf_r+0x1b4>
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	dc06      	bgt.n	8007de2 <__ssvfiscanf_r+0x2ae>
 8007dd4:	466b      	mov	r3, sp
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	a941      	add	r1, sp, #260	; 0x104
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 fa0e 	bl	80081fc <_scanf_i>
 8007de0:	e7ac      	b.n	8007d3c <__ssvfiscanf_r+0x208>
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <__ssvfiscanf_r+0x2ec>)
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f43f aecf 	beq.w	8007b88 <__ssvfiscanf_r+0x54>
 8007dea:	466b      	mov	r3, sp
 8007dec:	4622      	mov	r2, r4
 8007dee:	a941      	add	r1, sp, #260	; 0x104
 8007df0:	4630      	mov	r0, r6
 8007df2:	f3af 8000 	nop.w
 8007df6:	e7a1      	b.n	8007d3c <__ssvfiscanf_r+0x208>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007dfe:	bf18      	it	ne
 8007e00:	f04f 30ff 	movne.w	r0, #4294967295
 8007e04:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007e0e:	e7f9      	b.n	8007e04 <__ssvfiscanf_r+0x2d0>
 8007e10:	08007a81 	.word	0x08007a81
 8007e14:	08007afb 	.word	0x08007afb
 8007e18:	08008a13 	.word	0x08008a13
 8007e1c:	080089ca 	.word	0x080089ca
 8007e20:	00000000 	.word	0x00000000

08007e24 <_printf_common>:
 8007e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	4616      	mov	r6, r2
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	688a      	ldr	r2, [r1, #8]
 8007e2e:	690b      	ldr	r3, [r1, #16]
 8007e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	bfb8      	it	lt
 8007e38:	4613      	movlt	r3, r2
 8007e3a:	6033      	str	r3, [r6, #0]
 8007e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e40:	4607      	mov	r7, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	b10a      	cbz	r2, 8007e4a <_printf_common+0x26>
 8007e46:	3301      	adds	r3, #1
 8007e48:	6033      	str	r3, [r6, #0]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	0699      	lsls	r1, r3, #26
 8007e4e:	bf42      	ittt	mi
 8007e50:	6833      	ldrmi	r3, [r6, #0]
 8007e52:	3302      	addmi	r3, #2
 8007e54:	6033      	strmi	r3, [r6, #0]
 8007e56:	6825      	ldr	r5, [r4, #0]
 8007e58:	f015 0506 	ands.w	r5, r5, #6
 8007e5c:	d106      	bne.n	8007e6c <_printf_common+0x48>
 8007e5e:	f104 0a19 	add.w	sl, r4, #25
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	6832      	ldr	r2, [r6, #0]
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	dc26      	bgt.n	8007eba <_printf_common+0x96>
 8007e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e70:	1e13      	subs	r3, r2, #0
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	bf18      	it	ne
 8007e76:	2301      	movne	r3, #1
 8007e78:	0692      	lsls	r2, r2, #26
 8007e7a:	d42b      	bmi.n	8007ed4 <_printf_common+0xb0>
 8007e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e80:	4649      	mov	r1, r9
 8007e82:	4638      	mov	r0, r7
 8007e84:	47c0      	blx	r8
 8007e86:	3001      	adds	r0, #1
 8007e88:	d01e      	beq.n	8007ec8 <_printf_common+0xa4>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	68e5      	ldr	r5, [r4, #12]
 8007e8e:	6832      	ldr	r2, [r6, #0]
 8007e90:	f003 0306 	and.w	r3, r3, #6
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	bf08      	it	eq
 8007e98:	1aad      	subeq	r5, r5, r2
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	bf0c      	ite	eq
 8007ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ea4:	2500      	movne	r5, #0
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	bfc4      	itt	gt
 8007eaa:	1a9b      	subgt	r3, r3, r2
 8007eac:	18ed      	addgt	r5, r5, r3
 8007eae:	2600      	movs	r6, #0
 8007eb0:	341a      	adds	r4, #26
 8007eb2:	42b5      	cmp	r5, r6
 8007eb4:	d11a      	bne.n	8007eec <_printf_common+0xc8>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e008      	b.n	8007ecc <_printf_common+0xa8>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	47c0      	blx	r8
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d103      	bne.n	8007ed0 <_printf_common+0xac>
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	e7c6      	b.n	8007e62 <_printf_common+0x3e>
 8007ed4:	18e1      	adds	r1, r4, r3
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	2030      	movs	r0, #48	; 0x30
 8007eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ede:	4422      	add	r2, r4
 8007ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee8:	3302      	adds	r3, #2
 8007eea:	e7c7      	b.n	8007e7c <_printf_common+0x58>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	47c0      	blx	r8
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d0e6      	beq.n	8007ec8 <_printf_common+0xa4>
 8007efa:	3601      	adds	r6, #1
 8007efc:	e7d9      	b.n	8007eb2 <_printf_common+0x8e>
	...

08007f00 <_printf_i>:
 8007f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	4691      	mov	r9, r2
 8007f08:	7e27      	ldrb	r7, [r4, #24]
 8007f0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f0c:	2f78      	cmp	r7, #120	; 0x78
 8007f0e:	4680      	mov	r8, r0
 8007f10:	469a      	mov	sl, r3
 8007f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f16:	d807      	bhi.n	8007f28 <_printf_i+0x28>
 8007f18:	2f62      	cmp	r7, #98	; 0x62
 8007f1a:	d80a      	bhi.n	8007f32 <_printf_i+0x32>
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	f000 80d8 	beq.w	80080d2 <_printf_i+0x1d2>
 8007f22:	2f58      	cmp	r7, #88	; 0x58
 8007f24:	f000 80a3 	beq.w	800806e <_printf_i+0x16e>
 8007f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f30:	e03a      	b.n	8007fa8 <_printf_i+0xa8>
 8007f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f36:	2b15      	cmp	r3, #21
 8007f38:	d8f6      	bhi.n	8007f28 <_printf_i+0x28>
 8007f3a:	a001      	add	r0, pc, #4	; (adr r0, 8007f40 <_printf_i+0x40>)
 8007f3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f40:	08007f99 	.word	0x08007f99
 8007f44:	08007fad 	.word	0x08007fad
 8007f48:	08007f29 	.word	0x08007f29
 8007f4c:	08007f29 	.word	0x08007f29
 8007f50:	08007f29 	.word	0x08007f29
 8007f54:	08007f29 	.word	0x08007f29
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007f29 	.word	0x08007f29
 8007f60:	08007f29 	.word	0x08007f29
 8007f64:	08007f29 	.word	0x08007f29
 8007f68:	08007f29 	.word	0x08007f29
 8007f6c:	080080b9 	.word	0x080080b9
 8007f70:	08007fdd 	.word	0x08007fdd
 8007f74:	0800809b 	.word	0x0800809b
 8007f78:	08007f29 	.word	0x08007f29
 8007f7c:	08007f29 	.word	0x08007f29
 8007f80:	080080db 	.word	0x080080db
 8007f84:	08007f29 	.word	0x08007f29
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007f29 	.word	0x08007f29
 8007f90:	08007f29 	.word	0x08007f29
 8007f94:	080080a3 	.word	0x080080a3
 8007f98:	680b      	ldr	r3, [r1, #0]
 8007f9a:	1d1a      	adds	r2, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	600a      	str	r2, [r1, #0]
 8007fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0a3      	b.n	80080f4 <_printf_i+0x1f4>
 8007fac:	6825      	ldr	r5, [r4, #0]
 8007fae:	6808      	ldr	r0, [r1, #0]
 8007fb0:	062e      	lsls	r6, r5, #24
 8007fb2:	f100 0304 	add.w	r3, r0, #4
 8007fb6:	d50a      	bpl.n	8007fce <_printf_i+0xce>
 8007fb8:	6805      	ldr	r5, [r0, #0]
 8007fba:	600b      	str	r3, [r1, #0]
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	da03      	bge.n	8007fc8 <_printf_i+0xc8>
 8007fc0:	232d      	movs	r3, #45	; 0x2d
 8007fc2:	426d      	negs	r5, r5
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc8:	485e      	ldr	r0, [pc, #376]	; (8008144 <_printf_i+0x244>)
 8007fca:	230a      	movs	r3, #10
 8007fcc:	e019      	b.n	8008002 <_printf_i+0x102>
 8007fce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007fd2:	6805      	ldr	r5, [r0, #0]
 8007fd4:	600b      	str	r3, [r1, #0]
 8007fd6:	bf18      	it	ne
 8007fd8:	b22d      	sxthne	r5, r5
 8007fda:	e7ef      	b.n	8007fbc <_printf_i+0xbc>
 8007fdc:	680b      	ldr	r3, [r1, #0]
 8007fde:	6825      	ldr	r5, [r4, #0]
 8007fe0:	1d18      	adds	r0, r3, #4
 8007fe2:	6008      	str	r0, [r1, #0]
 8007fe4:	0628      	lsls	r0, r5, #24
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0xec>
 8007fe8:	681d      	ldr	r5, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <_printf_i+0xf2>
 8007fec:	0669      	lsls	r1, r5, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0xe8>
 8007ff0:	881d      	ldrh	r5, [r3, #0]
 8007ff2:	4854      	ldr	r0, [pc, #336]	; (8008144 <_printf_i+0x244>)
 8007ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ff6:	bf0c      	ite	eq
 8007ff8:	2308      	moveq	r3, #8
 8007ffa:	230a      	movne	r3, #10
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008002:	6866      	ldr	r6, [r4, #4]
 8008004:	60a6      	str	r6, [r4, #8]
 8008006:	2e00      	cmp	r6, #0
 8008008:	bfa2      	ittt	ge
 800800a:	6821      	ldrge	r1, [r4, #0]
 800800c:	f021 0104 	bicge.w	r1, r1, #4
 8008010:	6021      	strge	r1, [r4, #0]
 8008012:	b90d      	cbnz	r5, 8008018 <_printf_i+0x118>
 8008014:	2e00      	cmp	r6, #0
 8008016:	d04d      	beq.n	80080b4 <_printf_i+0x1b4>
 8008018:	4616      	mov	r6, r2
 800801a:	fbb5 f1f3 	udiv	r1, r5, r3
 800801e:	fb03 5711 	mls	r7, r3, r1, r5
 8008022:	5dc7      	ldrb	r7, [r0, r7]
 8008024:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008028:	462f      	mov	r7, r5
 800802a:	42bb      	cmp	r3, r7
 800802c:	460d      	mov	r5, r1
 800802e:	d9f4      	bls.n	800801a <_printf_i+0x11a>
 8008030:	2b08      	cmp	r3, #8
 8008032:	d10b      	bne.n	800804c <_printf_i+0x14c>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07df      	lsls	r7, r3, #31
 8008038:	d508      	bpl.n	800804c <_printf_i+0x14c>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6861      	ldr	r1, [r4, #4]
 800803e:	4299      	cmp	r1, r3
 8008040:	bfde      	ittt	le
 8008042:	2330      	movle	r3, #48	; 0x30
 8008044:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008048:	f106 36ff 	addle.w	r6, r6, #4294967295
 800804c:	1b92      	subs	r2, r2, r6
 800804e:	6122      	str	r2, [r4, #16]
 8008050:	f8cd a000 	str.w	sl, [sp]
 8008054:	464b      	mov	r3, r9
 8008056:	aa03      	add	r2, sp, #12
 8008058:	4621      	mov	r1, r4
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff fee2 	bl	8007e24 <_printf_common>
 8008060:	3001      	adds	r0, #1
 8008062:	d14c      	bne.n	80080fe <_printf_i+0x1fe>
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	b004      	add	sp, #16
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	4835      	ldr	r0, [pc, #212]	; (8008144 <_printf_i+0x244>)
 8008070:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	680e      	ldr	r6, [r1, #0]
 8008078:	061f      	lsls	r7, r3, #24
 800807a:	f856 5b04 	ldr.w	r5, [r6], #4
 800807e:	600e      	str	r6, [r1, #0]
 8008080:	d514      	bpl.n	80080ac <_printf_i+0x1ac>
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	bf44      	itt	mi
 8008086:	f043 0320 	orrmi.w	r3, r3, #32
 800808a:	6023      	strmi	r3, [r4, #0]
 800808c:	b91d      	cbnz	r5, 8008096 <_printf_i+0x196>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f023 0320 	bic.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	2310      	movs	r3, #16
 8008098:	e7b0      	b.n	8007ffc <_printf_i+0xfc>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f043 0320 	orr.w	r3, r3, #32
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	2378      	movs	r3, #120	; 0x78
 80080a4:	4828      	ldr	r0, [pc, #160]	; (8008148 <_printf_i+0x248>)
 80080a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080aa:	e7e3      	b.n	8008074 <_printf_i+0x174>
 80080ac:	065e      	lsls	r6, r3, #25
 80080ae:	bf48      	it	mi
 80080b0:	b2ad      	uxthmi	r5, r5
 80080b2:	e7e6      	b.n	8008082 <_printf_i+0x182>
 80080b4:	4616      	mov	r6, r2
 80080b6:	e7bb      	b.n	8008030 <_printf_i+0x130>
 80080b8:	680b      	ldr	r3, [r1, #0]
 80080ba:	6826      	ldr	r6, [r4, #0]
 80080bc:	6960      	ldr	r0, [r4, #20]
 80080be:	1d1d      	adds	r5, r3, #4
 80080c0:	600d      	str	r5, [r1, #0]
 80080c2:	0635      	lsls	r5, r6, #24
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	d501      	bpl.n	80080cc <_printf_i+0x1cc>
 80080c8:	6018      	str	r0, [r3, #0]
 80080ca:	e002      	b.n	80080d2 <_printf_i+0x1d2>
 80080cc:	0671      	lsls	r1, r6, #25
 80080ce:	d5fb      	bpl.n	80080c8 <_printf_i+0x1c8>
 80080d0:	8018      	strh	r0, [r3, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	4616      	mov	r6, r2
 80080d8:	e7ba      	b.n	8008050 <_printf_i+0x150>
 80080da:	680b      	ldr	r3, [r1, #0]
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	600a      	str	r2, [r1, #0]
 80080e0:	681e      	ldr	r6, [r3, #0]
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	2100      	movs	r1, #0
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7f8 f8b2 	bl	8000250 <memchr>
 80080ec:	b108      	cbz	r0, 80080f2 <_printf_i+0x1f2>
 80080ee:	1b80      	subs	r0, r0, r6
 80080f0:	6060      	str	r0, [r4, #4]
 80080f2:	6863      	ldr	r3, [r4, #4]
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	2300      	movs	r3, #0
 80080f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fc:	e7a8      	b.n	8008050 <_printf_i+0x150>
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	4632      	mov	r2, r6
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	47d0      	blx	sl
 8008108:	3001      	adds	r0, #1
 800810a:	d0ab      	beq.n	8008064 <_printf_i+0x164>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	079b      	lsls	r3, r3, #30
 8008110:	d413      	bmi.n	800813a <_printf_i+0x23a>
 8008112:	68e0      	ldr	r0, [r4, #12]
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	4298      	cmp	r0, r3
 8008118:	bfb8      	it	lt
 800811a:	4618      	movlt	r0, r3
 800811c:	e7a4      	b.n	8008068 <_printf_i+0x168>
 800811e:	2301      	movs	r3, #1
 8008120:	4632      	mov	r2, r6
 8008122:	4649      	mov	r1, r9
 8008124:	4640      	mov	r0, r8
 8008126:	47d0      	blx	sl
 8008128:	3001      	adds	r0, #1
 800812a:	d09b      	beq.n	8008064 <_printf_i+0x164>
 800812c:	3501      	adds	r5, #1
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	9903      	ldr	r1, [sp, #12]
 8008132:	1a5b      	subs	r3, r3, r1
 8008134:	42ab      	cmp	r3, r5
 8008136:	dcf2      	bgt.n	800811e <_printf_i+0x21e>
 8008138:	e7eb      	b.n	8008112 <_printf_i+0x212>
 800813a:	2500      	movs	r5, #0
 800813c:	f104 0619 	add.w	r6, r4, #25
 8008140:	e7f5      	b.n	800812e <_printf_i+0x22e>
 8008142:	bf00      	nop
 8008144:	080089d5 	.word	0x080089d5
 8008148:	080089e6 	.word	0x080089e6

0800814c <_scanf_chars>:
 800814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008150:	4615      	mov	r5, r2
 8008152:	688a      	ldr	r2, [r1, #8]
 8008154:	4680      	mov	r8, r0
 8008156:	460c      	mov	r4, r1
 8008158:	b932      	cbnz	r2, 8008168 <_scanf_chars+0x1c>
 800815a:	698a      	ldr	r2, [r1, #24]
 800815c:	2a00      	cmp	r2, #0
 800815e:	bf0c      	ite	eq
 8008160:	2201      	moveq	r2, #1
 8008162:	f04f 32ff 	movne.w	r2, #4294967295
 8008166:	608a      	str	r2, [r1, #8]
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80081f8 <_scanf_chars+0xac>
 800816e:	06d1      	lsls	r1, r2, #27
 8008170:	bf5f      	itttt	pl
 8008172:	681a      	ldrpl	r2, [r3, #0]
 8008174:	1d11      	addpl	r1, r2, #4
 8008176:	6019      	strpl	r1, [r3, #0]
 8008178:	6816      	ldrpl	r6, [r2, #0]
 800817a:	2700      	movs	r7, #0
 800817c:	69a0      	ldr	r0, [r4, #24]
 800817e:	b188      	cbz	r0, 80081a4 <_scanf_chars+0x58>
 8008180:	2801      	cmp	r0, #1
 8008182:	d107      	bne.n	8008194 <_scanf_chars+0x48>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	6963      	ldr	r3, [r4, #20]
 800818a:	5c9b      	ldrb	r3, [r3, r2]
 800818c:	b953      	cbnz	r3, 80081a4 <_scanf_chars+0x58>
 800818e:	bb27      	cbnz	r7, 80081da <_scanf_chars+0x8e>
 8008190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008194:	2802      	cmp	r0, #2
 8008196:	d120      	bne.n	80081da <_scanf_chars+0x8e>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80081a0:	071b      	lsls	r3, r3, #28
 80081a2:	d41a      	bmi.n	80081da <_scanf_chars+0x8e>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	06da      	lsls	r2, r3, #27
 80081a8:	bf5e      	ittt	pl
 80081aa:	682b      	ldrpl	r3, [r5, #0]
 80081ac:	781b      	ldrbpl	r3, [r3, #0]
 80081ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80081b2:	682a      	ldr	r2, [r5, #0]
 80081b4:	686b      	ldr	r3, [r5, #4]
 80081b6:	3201      	adds	r2, #1
 80081b8:	602a      	str	r2, [r5, #0]
 80081ba:	68a2      	ldr	r2, [r4, #8]
 80081bc:	3b01      	subs	r3, #1
 80081be:	3a01      	subs	r2, #1
 80081c0:	606b      	str	r3, [r5, #4]
 80081c2:	3701      	adds	r7, #1
 80081c4:	60a2      	str	r2, [r4, #8]
 80081c6:	b142      	cbz	r2, 80081da <_scanf_chars+0x8e>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dcd7      	bgt.n	800817c <_scanf_chars+0x30>
 80081cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081d0:	4629      	mov	r1, r5
 80081d2:	4640      	mov	r0, r8
 80081d4:	4798      	blx	r3
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d0d0      	beq.n	800817c <_scanf_chars+0x30>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f013 0310 	ands.w	r3, r3, #16
 80081e0:	d105      	bne.n	80081ee <_scanf_chars+0xa2>
 80081e2:	68e2      	ldr	r2, [r4, #12]
 80081e4:	3201      	adds	r2, #1
 80081e6:	60e2      	str	r2, [r4, #12]
 80081e8:	69a2      	ldr	r2, [r4, #24]
 80081ea:	b102      	cbz	r2, 80081ee <_scanf_chars+0xa2>
 80081ec:	7033      	strb	r3, [r6, #0]
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	441f      	add	r7, r3
 80081f2:	6127      	str	r7, [r4, #16]
 80081f4:	2000      	movs	r0, #0
 80081f6:	e7cb      	b.n	8008190 <_scanf_chars+0x44>
 80081f8:	08008a13 	.word	0x08008a13

080081fc <_scanf_i>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	4698      	mov	r8, r3
 8008202:	4b74      	ldr	r3, [pc, #464]	; (80083d4 <_scanf_i+0x1d8>)
 8008204:	460c      	mov	r4, r1
 8008206:	4682      	mov	sl, r0
 8008208:	4616      	mov	r6, r2
 800820a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800820e:	b087      	sub	sp, #28
 8008210:	ab03      	add	r3, sp, #12
 8008212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008216:	4b70      	ldr	r3, [pc, #448]	; (80083d8 <_scanf_i+0x1dc>)
 8008218:	69a1      	ldr	r1, [r4, #24]
 800821a:	4a70      	ldr	r2, [pc, #448]	; (80083dc <_scanf_i+0x1e0>)
 800821c:	2903      	cmp	r1, #3
 800821e:	bf18      	it	ne
 8008220:	461a      	movne	r2, r3
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	9201      	str	r2, [sp, #4]
 8008226:	1e5a      	subs	r2, r3, #1
 8008228:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800822c:	bf88      	it	hi
 800822e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008232:	4627      	mov	r7, r4
 8008234:	bf82      	ittt	hi
 8008236:	eb03 0905 	addhi.w	r9, r3, r5
 800823a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800823e:	60a3      	strhi	r3, [r4, #8]
 8008240:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008244:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008248:	bf98      	it	ls
 800824a:	f04f 0900 	movls.w	r9, #0
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	463d      	mov	r5, r7
 8008252:	f04f 0b00 	mov.w	fp, #0
 8008256:	6831      	ldr	r1, [r6, #0]
 8008258:	ab03      	add	r3, sp, #12
 800825a:	7809      	ldrb	r1, [r1, #0]
 800825c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008260:	2202      	movs	r2, #2
 8008262:	f7f7 fff5 	bl	8000250 <memchr>
 8008266:	b328      	cbz	r0, 80082b4 <_scanf_i+0xb8>
 8008268:	f1bb 0f01 	cmp.w	fp, #1
 800826c:	d159      	bne.n	8008322 <_scanf_i+0x126>
 800826e:	6862      	ldr	r2, [r4, #4]
 8008270:	b92a      	cbnz	r2, 800827e <_scanf_i+0x82>
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	2308      	movs	r3, #8
 8008276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800827a:	6063      	str	r3, [r4, #4]
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008284:	6022      	str	r2, [r4, #0]
 8008286:	68a2      	ldr	r2, [r4, #8]
 8008288:	1e51      	subs	r1, r2, #1
 800828a:	60a1      	str	r1, [r4, #8]
 800828c:	b192      	cbz	r2, 80082b4 <_scanf_i+0xb8>
 800828e:	6832      	ldr	r2, [r6, #0]
 8008290:	1c51      	adds	r1, r2, #1
 8008292:	6031      	str	r1, [r6, #0]
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	f805 2b01 	strb.w	r2, [r5], #1
 800829a:	6872      	ldr	r2, [r6, #4]
 800829c:	3a01      	subs	r2, #1
 800829e:	2a00      	cmp	r2, #0
 80082a0:	6072      	str	r2, [r6, #4]
 80082a2:	dc07      	bgt.n	80082b4 <_scanf_i+0xb8>
 80082a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80082a8:	4631      	mov	r1, r6
 80082aa:	4650      	mov	r0, sl
 80082ac:	4790      	blx	r2
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8085 	bne.w	80083be <_scanf_i+0x1c2>
 80082b4:	f10b 0b01 	add.w	fp, fp, #1
 80082b8:	f1bb 0f03 	cmp.w	fp, #3
 80082bc:	d1cb      	bne.n	8008256 <_scanf_i+0x5a>
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	b90b      	cbnz	r3, 80082c6 <_scanf_i+0xca>
 80082c2:	230a      	movs	r3, #10
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	4945      	ldr	r1, [pc, #276]	; (80083e0 <_scanf_i+0x1e4>)
 80082ca:	6960      	ldr	r0, [r4, #20]
 80082cc:	1ac9      	subs	r1, r1, r3
 80082ce:	f000 f889 	bl	80083e4 <__sccl>
 80082d2:	f04f 0b00 	mov.w	fp, #0
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d03d      	beq.n	800835a <_scanf_i+0x15e>
 80082de:	6831      	ldr	r1, [r6, #0]
 80082e0:	6960      	ldr	r0, [r4, #20]
 80082e2:	f891 c000 	ldrb.w	ip, [r1]
 80082e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d035      	beq.n	800835a <_scanf_i+0x15e>
 80082ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80082f2:	d124      	bne.n	800833e <_scanf_i+0x142>
 80082f4:	0510      	lsls	r0, r2, #20
 80082f6:	d522      	bpl.n	800833e <_scanf_i+0x142>
 80082f8:	f10b 0b01 	add.w	fp, fp, #1
 80082fc:	f1b9 0f00 	cmp.w	r9, #0
 8008300:	d003      	beq.n	800830a <_scanf_i+0x10e>
 8008302:	3301      	adds	r3, #1
 8008304:	f109 39ff 	add.w	r9, r9, #4294967295
 8008308:	60a3      	str	r3, [r4, #8]
 800830a:	6873      	ldr	r3, [r6, #4]
 800830c:	3b01      	subs	r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	6073      	str	r3, [r6, #4]
 8008312:	dd1b      	ble.n	800834c <_scanf_i+0x150>
 8008314:	6833      	ldr	r3, [r6, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	3b01      	subs	r3, #1
 800831e:	60a3      	str	r3, [r4, #8]
 8008320:	e7d9      	b.n	80082d6 <_scanf_i+0xda>
 8008322:	f1bb 0f02 	cmp.w	fp, #2
 8008326:	d1ae      	bne.n	8008286 <_scanf_i+0x8a>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800832e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008332:	d1bf      	bne.n	80082b4 <_scanf_i+0xb8>
 8008334:	2310      	movs	r3, #16
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800833c:	e7a2      	b.n	8008284 <_scanf_i+0x88>
 800833e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	780b      	ldrb	r3, [r1, #0]
 8008346:	f805 3b01 	strb.w	r3, [r5], #1
 800834a:	e7de      	b.n	800830a <_scanf_i+0x10e>
 800834c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008350:	4631      	mov	r1, r6
 8008352:	4650      	mov	r0, sl
 8008354:	4798      	blx	r3
 8008356:	2800      	cmp	r0, #0
 8008358:	d0df      	beq.n	800831a <_scanf_i+0x11e>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	05d9      	lsls	r1, r3, #23
 800835e:	d50d      	bpl.n	800837c <_scanf_i+0x180>
 8008360:	42bd      	cmp	r5, r7
 8008362:	d909      	bls.n	8008378 <_scanf_i+0x17c>
 8008364:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800836c:	4632      	mov	r2, r6
 800836e:	4650      	mov	r0, sl
 8008370:	4798      	blx	r3
 8008372:	f105 39ff 	add.w	r9, r5, #4294967295
 8008376:	464d      	mov	r5, r9
 8008378:	42bd      	cmp	r5, r7
 800837a:	d028      	beq.n	80083ce <_scanf_i+0x1d2>
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	f012 0210 	ands.w	r2, r2, #16
 8008382:	d113      	bne.n	80083ac <_scanf_i+0x1b0>
 8008384:	702a      	strb	r2, [r5, #0]
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	9e01      	ldr	r6, [sp, #4]
 800838a:	4639      	mov	r1, r7
 800838c:	4650      	mov	r0, sl
 800838e:	47b0      	blx	r6
 8008390:	f8d8 3000 	ldr.w	r3, [r8]
 8008394:	6821      	ldr	r1, [r4, #0]
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	f8c8 2000 	str.w	r2, [r8]
 800839c:	f011 0f20 	tst.w	r1, #32
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	d00f      	beq.n	80083c4 <_scanf_i+0x1c8>
 80083a4:	6018      	str	r0, [r3, #0]
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60e3      	str	r3, [r4, #12]
 80083ac:	1bed      	subs	r5, r5, r7
 80083ae:	44ab      	add	fp, r5
 80083b0:	6925      	ldr	r5, [r4, #16]
 80083b2:	445d      	add	r5, fp
 80083b4:	6125      	str	r5, [r4, #16]
 80083b6:	2000      	movs	r0, #0
 80083b8:	b007      	add	sp, #28
 80083ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083be:	f04f 0b00 	mov.w	fp, #0
 80083c2:	e7ca      	b.n	800835a <_scanf_i+0x15e>
 80083c4:	07ca      	lsls	r2, r1, #31
 80083c6:	bf4c      	ite	mi
 80083c8:	8018      	strhmi	r0, [r3, #0]
 80083ca:	6018      	strpl	r0, [r3, #0]
 80083cc:	e7eb      	b.n	80083a6 <_scanf_i+0x1aa>
 80083ce:	2001      	movs	r0, #1
 80083d0:	e7f2      	b.n	80083b8 <_scanf_i+0x1bc>
 80083d2:	bf00      	nop
 80083d4:	080089a0 	.word	0x080089a0
 80083d8:	0800865d 	.word	0x0800865d
 80083dc:	08008561 	.word	0x08008561
 80083e0:	08008a10 	.word	0x08008a10

080083e4 <__sccl>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	780b      	ldrb	r3, [r1, #0]
 80083e8:	4604      	mov	r4, r0
 80083ea:	2b5e      	cmp	r3, #94	; 0x5e
 80083ec:	bf0b      	itete	eq
 80083ee:	784b      	ldrbeq	r3, [r1, #1]
 80083f0:	1c48      	addne	r0, r1, #1
 80083f2:	1c88      	addeq	r0, r1, #2
 80083f4:	2200      	movne	r2, #0
 80083f6:	bf08      	it	eq
 80083f8:	2201      	moveq	r2, #1
 80083fa:	1e61      	subs	r1, r4, #1
 80083fc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008400:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008404:	42a9      	cmp	r1, r5
 8008406:	d1fb      	bne.n	8008400 <__sccl+0x1c>
 8008408:	b90b      	cbnz	r3, 800840e <__sccl+0x2a>
 800840a:	3801      	subs	r0, #1
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	f082 0101 	eor.w	r1, r2, #1
 8008412:	54e1      	strb	r1, [r4, r3]
 8008414:	1c42      	adds	r2, r0, #1
 8008416:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800841a:	2d2d      	cmp	r5, #45	; 0x2d
 800841c:	f102 36ff 	add.w	r6, r2, #4294967295
 8008420:	4610      	mov	r0, r2
 8008422:	d006      	beq.n	8008432 <__sccl+0x4e>
 8008424:	2d5d      	cmp	r5, #93	; 0x5d
 8008426:	d0f1      	beq.n	800840c <__sccl+0x28>
 8008428:	b90d      	cbnz	r5, 800842e <__sccl+0x4a>
 800842a:	4630      	mov	r0, r6
 800842c:	e7ee      	b.n	800840c <__sccl+0x28>
 800842e:	462b      	mov	r3, r5
 8008430:	e7ef      	b.n	8008412 <__sccl+0x2e>
 8008432:	7816      	ldrb	r6, [r2, #0]
 8008434:	2e5d      	cmp	r6, #93	; 0x5d
 8008436:	d0fa      	beq.n	800842e <__sccl+0x4a>
 8008438:	42b3      	cmp	r3, r6
 800843a:	dcf8      	bgt.n	800842e <__sccl+0x4a>
 800843c:	4618      	mov	r0, r3
 800843e:	3001      	adds	r0, #1
 8008440:	4286      	cmp	r6, r0
 8008442:	5421      	strb	r1, [r4, r0]
 8008444:	dcfb      	bgt.n	800843e <__sccl+0x5a>
 8008446:	43d8      	mvns	r0, r3
 8008448:	4430      	add	r0, r6
 800844a:	1c5d      	adds	r5, r3, #1
 800844c:	42b3      	cmp	r3, r6
 800844e:	bfa8      	it	ge
 8008450:	2000      	movge	r0, #0
 8008452:	182b      	adds	r3, r5, r0
 8008454:	3202      	adds	r2, #2
 8008456:	e7de      	b.n	8008416 <__sccl+0x32>

08008458 <_strtol_l.isra.0>:
 8008458:	2b01      	cmp	r3, #1
 800845a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845e:	d001      	beq.n	8008464 <_strtol_l.isra.0+0xc>
 8008460:	2b24      	cmp	r3, #36	; 0x24
 8008462:	d906      	bls.n	8008472 <_strtol_l.isra.0+0x1a>
 8008464:	f7ff f930 	bl	80076c8 <__errno>
 8008468:	2316      	movs	r3, #22
 800846a:	6003      	str	r3, [r0, #0]
 800846c:	2000      	movs	r0, #0
 800846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008472:	4f3a      	ldr	r7, [pc, #232]	; (800855c <_strtol_l.isra.0+0x104>)
 8008474:	468e      	mov	lr, r1
 8008476:	4676      	mov	r6, lr
 8008478:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800847c:	5de5      	ldrb	r5, [r4, r7]
 800847e:	f015 0508 	ands.w	r5, r5, #8
 8008482:	d1f8      	bne.n	8008476 <_strtol_l.isra.0+0x1e>
 8008484:	2c2d      	cmp	r4, #45	; 0x2d
 8008486:	d134      	bne.n	80084f2 <_strtol_l.isra.0+0x9a>
 8008488:	f89e 4000 	ldrb.w	r4, [lr]
 800848c:	f04f 0801 	mov.w	r8, #1
 8008490:	f106 0e02 	add.w	lr, r6, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d05c      	beq.n	8008552 <_strtol_l.isra.0+0xfa>
 8008498:	2b10      	cmp	r3, #16
 800849a:	d10c      	bne.n	80084b6 <_strtol_l.isra.0+0x5e>
 800849c:	2c30      	cmp	r4, #48	; 0x30
 800849e:	d10a      	bne.n	80084b6 <_strtol_l.isra.0+0x5e>
 80084a0:	f89e 4000 	ldrb.w	r4, [lr]
 80084a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084a8:	2c58      	cmp	r4, #88	; 0x58
 80084aa:	d14d      	bne.n	8008548 <_strtol_l.isra.0+0xf0>
 80084ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80084b0:	2310      	movs	r3, #16
 80084b2:	f10e 0e02 	add.w	lr, lr, #2
 80084b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80084ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084be:	2600      	movs	r6, #0
 80084c0:	fbbc f9f3 	udiv	r9, ip, r3
 80084c4:	4635      	mov	r5, r6
 80084c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80084ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80084ce:	2f09      	cmp	r7, #9
 80084d0:	d818      	bhi.n	8008504 <_strtol_l.isra.0+0xac>
 80084d2:	463c      	mov	r4, r7
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	dd24      	ble.n	8008522 <_strtol_l.isra.0+0xca>
 80084d8:	2e00      	cmp	r6, #0
 80084da:	db1f      	blt.n	800851c <_strtol_l.isra.0+0xc4>
 80084dc:	45a9      	cmp	r9, r5
 80084de:	d31d      	bcc.n	800851c <_strtol_l.isra.0+0xc4>
 80084e0:	d101      	bne.n	80084e6 <_strtol_l.isra.0+0x8e>
 80084e2:	45a2      	cmp	sl, r4
 80084e4:	db1a      	blt.n	800851c <_strtol_l.isra.0+0xc4>
 80084e6:	fb05 4503 	mla	r5, r5, r3, r4
 80084ea:	2601      	movs	r6, #1
 80084ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084f0:	e7eb      	b.n	80084ca <_strtol_l.isra.0+0x72>
 80084f2:	2c2b      	cmp	r4, #43	; 0x2b
 80084f4:	bf08      	it	eq
 80084f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80084fa:	46a8      	mov	r8, r5
 80084fc:	bf08      	it	eq
 80084fe:	f106 0e02 	addeq.w	lr, r6, #2
 8008502:	e7c7      	b.n	8008494 <_strtol_l.isra.0+0x3c>
 8008504:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008508:	2f19      	cmp	r7, #25
 800850a:	d801      	bhi.n	8008510 <_strtol_l.isra.0+0xb8>
 800850c:	3c37      	subs	r4, #55	; 0x37
 800850e:	e7e1      	b.n	80084d4 <_strtol_l.isra.0+0x7c>
 8008510:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008514:	2f19      	cmp	r7, #25
 8008516:	d804      	bhi.n	8008522 <_strtol_l.isra.0+0xca>
 8008518:	3c57      	subs	r4, #87	; 0x57
 800851a:	e7db      	b.n	80084d4 <_strtol_l.isra.0+0x7c>
 800851c:	f04f 36ff 	mov.w	r6, #4294967295
 8008520:	e7e4      	b.n	80084ec <_strtol_l.isra.0+0x94>
 8008522:	2e00      	cmp	r6, #0
 8008524:	da05      	bge.n	8008532 <_strtol_l.isra.0+0xda>
 8008526:	2322      	movs	r3, #34	; 0x22
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	4665      	mov	r5, ip
 800852c:	b942      	cbnz	r2, 8008540 <_strtol_l.isra.0+0xe8>
 800852e:	4628      	mov	r0, r5
 8008530:	e79d      	b.n	800846e <_strtol_l.isra.0+0x16>
 8008532:	f1b8 0f00 	cmp.w	r8, #0
 8008536:	d000      	beq.n	800853a <_strtol_l.isra.0+0xe2>
 8008538:	426d      	negs	r5, r5
 800853a:	2a00      	cmp	r2, #0
 800853c:	d0f7      	beq.n	800852e <_strtol_l.isra.0+0xd6>
 800853e:	b10e      	cbz	r6, 8008544 <_strtol_l.isra.0+0xec>
 8008540:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	e7f2      	b.n	800852e <_strtol_l.isra.0+0xd6>
 8008548:	2430      	movs	r4, #48	; 0x30
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1b3      	bne.n	80084b6 <_strtol_l.isra.0+0x5e>
 800854e:	2308      	movs	r3, #8
 8008550:	e7b1      	b.n	80084b6 <_strtol_l.isra.0+0x5e>
 8008552:	2c30      	cmp	r4, #48	; 0x30
 8008554:	d0a4      	beq.n	80084a0 <_strtol_l.isra.0+0x48>
 8008556:	230a      	movs	r3, #10
 8008558:	e7ad      	b.n	80084b6 <_strtol_l.isra.0+0x5e>
 800855a:	bf00      	nop
 800855c:	08008a13 	.word	0x08008a13

08008560 <_strtol_r>:
 8008560:	f7ff bf7a 	b.w	8008458 <_strtol_l.isra.0>

08008564 <_strtoul_l.isra.0>:
 8008564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008568:	4e3b      	ldr	r6, [pc, #236]	; (8008658 <_strtoul_l.isra.0+0xf4>)
 800856a:	4686      	mov	lr, r0
 800856c:	468c      	mov	ip, r1
 800856e:	4660      	mov	r0, ip
 8008570:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008574:	5da5      	ldrb	r5, [r4, r6]
 8008576:	f015 0508 	ands.w	r5, r5, #8
 800857a:	d1f8      	bne.n	800856e <_strtoul_l.isra.0+0xa>
 800857c:	2c2d      	cmp	r4, #45	; 0x2d
 800857e:	d134      	bne.n	80085ea <_strtoul_l.isra.0+0x86>
 8008580:	f89c 4000 	ldrb.w	r4, [ip]
 8008584:	f04f 0801 	mov.w	r8, #1
 8008588:	f100 0c02 	add.w	ip, r0, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d05e      	beq.n	800864e <_strtoul_l.isra.0+0xea>
 8008590:	2b10      	cmp	r3, #16
 8008592:	d10c      	bne.n	80085ae <_strtoul_l.isra.0+0x4a>
 8008594:	2c30      	cmp	r4, #48	; 0x30
 8008596:	d10a      	bne.n	80085ae <_strtoul_l.isra.0+0x4a>
 8008598:	f89c 0000 	ldrb.w	r0, [ip]
 800859c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80085a0:	2858      	cmp	r0, #88	; 0x58
 80085a2:	d14f      	bne.n	8008644 <_strtoul_l.isra.0+0xe0>
 80085a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80085a8:	2310      	movs	r3, #16
 80085aa:	f10c 0c02 	add.w	ip, ip, #2
 80085ae:	f04f 37ff 	mov.w	r7, #4294967295
 80085b2:	2500      	movs	r5, #0
 80085b4:	fbb7 f7f3 	udiv	r7, r7, r3
 80085b8:	fb03 f907 	mul.w	r9, r3, r7
 80085bc:	ea6f 0909 	mvn.w	r9, r9
 80085c0:	4628      	mov	r0, r5
 80085c2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80085c6:	2e09      	cmp	r6, #9
 80085c8:	d818      	bhi.n	80085fc <_strtoul_l.isra.0+0x98>
 80085ca:	4634      	mov	r4, r6
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	dd24      	ble.n	800861a <_strtoul_l.isra.0+0xb6>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	db1f      	blt.n	8008614 <_strtoul_l.isra.0+0xb0>
 80085d4:	4287      	cmp	r7, r0
 80085d6:	d31d      	bcc.n	8008614 <_strtoul_l.isra.0+0xb0>
 80085d8:	d101      	bne.n	80085de <_strtoul_l.isra.0+0x7a>
 80085da:	45a1      	cmp	r9, r4
 80085dc:	db1a      	blt.n	8008614 <_strtoul_l.isra.0+0xb0>
 80085de:	fb00 4003 	mla	r0, r0, r3, r4
 80085e2:	2501      	movs	r5, #1
 80085e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80085e8:	e7eb      	b.n	80085c2 <_strtoul_l.isra.0+0x5e>
 80085ea:	2c2b      	cmp	r4, #43	; 0x2b
 80085ec:	bf08      	it	eq
 80085ee:	f89c 4000 	ldrbeq.w	r4, [ip]
 80085f2:	46a8      	mov	r8, r5
 80085f4:	bf08      	it	eq
 80085f6:	f100 0c02 	addeq.w	ip, r0, #2
 80085fa:	e7c7      	b.n	800858c <_strtoul_l.isra.0+0x28>
 80085fc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008600:	2e19      	cmp	r6, #25
 8008602:	d801      	bhi.n	8008608 <_strtoul_l.isra.0+0xa4>
 8008604:	3c37      	subs	r4, #55	; 0x37
 8008606:	e7e1      	b.n	80085cc <_strtoul_l.isra.0+0x68>
 8008608:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800860c:	2e19      	cmp	r6, #25
 800860e:	d804      	bhi.n	800861a <_strtoul_l.isra.0+0xb6>
 8008610:	3c57      	subs	r4, #87	; 0x57
 8008612:	e7db      	b.n	80085cc <_strtoul_l.isra.0+0x68>
 8008614:	f04f 35ff 	mov.w	r5, #4294967295
 8008618:	e7e4      	b.n	80085e4 <_strtoul_l.isra.0+0x80>
 800861a:	2d00      	cmp	r5, #0
 800861c:	da07      	bge.n	800862e <_strtoul_l.isra.0+0xca>
 800861e:	2322      	movs	r3, #34	; 0x22
 8008620:	f8ce 3000 	str.w	r3, [lr]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b942      	cbnz	r2, 800863c <_strtoul_l.isra.0+0xd8>
 800862a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800862e:	f1b8 0f00 	cmp.w	r8, #0
 8008632:	d000      	beq.n	8008636 <_strtoul_l.isra.0+0xd2>
 8008634:	4240      	negs	r0, r0
 8008636:	2a00      	cmp	r2, #0
 8008638:	d0f7      	beq.n	800862a <_strtoul_l.isra.0+0xc6>
 800863a:	b10d      	cbz	r5, 8008640 <_strtoul_l.isra.0+0xdc>
 800863c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008640:	6011      	str	r1, [r2, #0]
 8008642:	e7f2      	b.n	800862a <_strtoul_l.isra.0+0xc6>
 8008644:	2430      	movs	r4, #48	; 0x30
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1b1      	bne.n	80085ae <_strtoul_l.isra.0+0x4a>
 800864a:	2308      	movs	r3, #8
 800864c:	e7af      	b.n	80085ae <_strtoul_l.isra.0+0x4a>
 800864e:	2c30      	cmp	r4, #48	; 0x30
 8008650:	d0a2      	beq.n	8008598 <_strtoul_l.isra.0+0x34>
 8008652:	230a      	movs	r3, #10
 8008654:	e7ab      	b.n	80085ae <_strtoul_l.isra.0+0x4a>
 8008656:	bf00      	nop
 8008658:	08008a13 	.word	0x08008a13

0800865c <_strtoul_r>:
 800865c:	f7ff bf82 	b.w	8008564 <_strtoul_l.isra.0>

08008660 <__submore>:
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	460c      	mov	r4, r1
 8008666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800866c:	4299      	cmp	r1, r3
 800866e:	d11d      	bne.n	80086ac <__submore+0x4c>
 8008670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008674:	f000 f8a8 	bl	80087c8 <_malloc_r>
 8008678:	b918      	cbnz	r0, 8008682 <__submore+0x22>
 800867a:	f04f 30ff 	mov.w	r0, #4294967295
 800867e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008686:	63a3      	str	r3, [r4, #56]	; 0x38
 8008688:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800868c:	6360      	str	r0, [r4, #52]	; 0x34
 800868e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008696:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800869a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800869e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80086a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80086a6:	6020      	str	r0, [r4, #0]
 80086a8:	2000      	movs	r0, #0
 80086aa:	e7e8      	b.n	800867e <__submore+0x1e>
 80086ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80086ae:	0077      	lsls	r7, r6, #1
 80086b0:	463a      	mov	r2, r7
 80086b2:	f000 f8e3 	bl	800887c <_realloc_r>
 80086b6:	4605      	mov	r5, r0
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0de      	beq.n	800867a <__submore+0x1a>
 80086bc:	eb00 0806 	add.w	r8, r0, r6
 80086c0:	4601      	mov	r1, r0
 80086c2:	4632      	mov	r2, r6
 80086c4:	4640      	mov	r0, r8
 80086c6:	f000 f807 	bl	80086d8 <memcpy>
 80086ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80086ce:	f8c4 8000 	str.w	r8, [r4]
 80086d2:	e7e9      	b.n	80086a8 <__submore+0x48>

080086d4 <__retarget_lock_acquire_recursive>:
 80086d4:	4770      	bx	lr

080086d6 <__retarget_lock_release_recursive>:
 80086d6:	4770      	bx	lr

080086d8 <memcpy>:
 80086d8:	440a      	add	r2, r1
 80086da:	4291      	cmp	r1, r2
 80086dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086e0:	d100      	bne.n	80086e4 <memcpy+0xc>
 80086e2:	4770      	bx	lr
 80086e4:	b510      	push	{r4, lr}
 80086e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ee:	4291      	cmp	r1, r2
 80086f0:	d1f9      	bne.n	80086e6 <memcpy+0xe>
 80086f2:	bd10      	pop	{r4, pc}

080086f4 <memmove>:
 80086f4:	4288      	cmp	r0, r1
 80086f6:	b510      	push	{r4, lr}
 80086f8:	eb01 0402 	add.w	r4, r1, r2
 80086fc:	d902      	bls.n	8008704 <memmove+0x10>
 80086fe:	4284      	cmp	r4, r0
 8008700:	4623      	mov	r3, r4
 8008702:	d807      	bhi.n	8008714 <memmove+0x20>
 8008704:	1e43      	subs	r3, r0, #1
 8008706:	42a1      	cmp	r1, r4
 8008708:	d008      	beq.n	800871c <memmove+0x28>
 800870a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800870e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008712:	e7f8      	b.n	8008706 <memmove+0x12>
 8008714:	4402      	add	r2, r0
 8008716:	4601      	mov	r1, r0
 8008718:	428a      	cmp	r2, r1
 800871a:	d100      	bne.n	800871e <memmove+0x2a>
 800871c:	bd10      	pop	{r4, pc}
 800871e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008726:	e7f7      	b.n	8008718 <memmove+0x24>

08008728 <_free_r>:
 8008728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800872a:	2900      	cmp	r1, #0
 800872c:	d048      	beq.n	80087c0 <_free_r+0x98>
 800872e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008732:	9001      	str	r0, [sp, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f1a1 0404 	sub.w	r4, r1, #4
 800873a:	bfb8      	it	lt
 800873c:	18e4      	addlt	r4, r4, r3
 800873e:	f000 f8d3 	bl	80088e8 <__malloc_lock>
 8008742:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <_free_r+0x9c>)
 8008744:	9801      	ldr	r0, [sp, #4]
 8008746:	6813      	ldr	r3, [r2, #0]
 8008748:	4615      	mov	r5, r2
 800874a:	b933      	cbnz	r3, 800875a <_free_r+0x32>
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	6014      	str	r4, [r2, #0]
 8008750:	b003      	add	sp, #12
 8008752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008756:	f000 b8cd 	b.w	80088f4 <__malloc_unlock>
 800875a:	42a3      	cmp	r3, r4
 800875c:	d90b      	bls.n	8008776 <_free_r+0x4e>
 800875e:	6821      	ldr	r1, [r4, #0]
 8008760:	1862      	adds	r2, r4, r1
 8008762:	4293      	cmp	r3, r2
 8008764:	bf04      	itt	eq
 8008766:	681a      	ldreq	r2, [r3, #0]
 8008768:	685b      	ldreq	r3, [r3, #4]
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	bf04      	itt	eq
 800876e:	1852      	addeq	r2, r2, r1
 8008770:	6022      	streq	r2, [r4, #0]
 8008772:	602c      	str	r4, [r5, #0]
 8008774:	e7ec      	b.n	8008750 <_free_r+0x28>
 8008776:	461a      	mov	r2, r3
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	b10b      	cbz	r3, 8008780 <_free_r+0x58>
 800877c:	42a3      	cmp	r3, r4
 800877e:	d9fa      	bls.n	8008776 <_free_r+0x4e>
 8008780:	6811      	ldr	r1, [r2, #0]
 8008782:	1855      	adds	r5, r2, r1
 8008784:	42a5      	cmp	r5, r4
 8008786:	d10b      	bne.n	80087a0 <_free_r+0x78>
 8008788:	6824      	ldr	r4, [r4, #0]
 800878a:	4421      	add	r1, r4
 800878c:	1854      	adds	r4, r2, r1
 800878e:	42a3      	cmp	r3, r4
 8008790:	6011      	str	r1, [r2, #0]
 8008792:	d1dd      	bne.n	8008750 <_free_r+0x28>
 8008794:	681c      	ldr	r4, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	4421      	add	r1, r4
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	e7d7      	b.n	8008750 <_free_r+0x28>
 80087a0:	d902      	bls.n	80087a8 <_free_r+0x80>
 80087a2:	230c      	movs	r3, #12
 80087a4:	6003      	str	r3, [r0, #0]
 80087a6:	e7d3      	b.n	8008750 <_free_r+0x28>
 80087a8:	6825      	ldr	r5, [r4, #0]
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf04      	itt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	bf04      	itt	eq
 80087b8:	1949      	addeq	r1, r1, r5
 80087ba:	6021      	streq	r1, [r4, #0]
 80087bc:	6054      	str	r4, [r2, #4]
 80087be:	e7c7      	b.n	8008750 <_free_r+0x28>
 80087c0:	b003      	add	sp, #12
 80087c2:	bd30      	pop	{r4, r5, pc}
 80087c4:	200001e0 	.word	0x200001e0

080087c8 <_malloc_r>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	1ccd      	adds	r5, r1, #3
 80087cc:	f025 0503 	bic.w	r5, r5, #3
 80087d0:	3508      	adds	r5, #8
 80087d2:	2d0c      	cmp	r5, #12
 80087d4:	bf38      	it	cc
 80087d6:	250c      	movcc	r5, #12
 80087d8:	2d00      	cmp	r5, #0
 80087da:	4606      	mov	r6, r0
 80087dc:	db01      	blt.n	80087e2 <_malloc_r+0x1a>
 80087de:	42a9      	cmp	r1, r5
 80087e0:	d903      	bls.n	80087ea <_malloc_r+0x22>
 80087e2:	230c      	movs	r3, #12
 80087e4:	6033      	str	r3, [r6, #0]
 80087e6:	2000      	movs	r0, #0
 80087e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ea:	f000 f87d 	bl	80088e8 <__malloc_lock>
 80087ee:	4921      	ldr	r1, [pc, #132]	; (8008874 <_malloc_r+0xac>)
 80087f0:	680a      	ldr	r2, [r1, #0]
 80087f2:	4614      	mov	r4, r2
 80087f4:	b99c      	cbnz	r4, 800881e <_malloc_r+0x56>
 80087f6:	4f20      	ldr	r7, [pc, #128]	; (8008878 <_malloc_r+0xb0>)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	b923      	cbnz	r3, 8008806 <_malloc_r+0x3e>
 80087fc:	4621      	mov	r1, r4
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 f862 	bl	80088c8 <_sbrk_r>
 8008804:	6038      	str	r0, [r7, #0]
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	f000 f85d 	bl	80088c8 <_sbrk_r>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d123      	bne.n	800885a <_malloc_r+0x92>
 8008812:	230c      	movs	r3, #12
 8008814:	6033      	str	r3, [r6, #0]
 8008816:	4630      	mov	r0, r6
 8008818:	f000 f86c 	bl	80088f4 <__malloc_unlock>
 800881c:	e7e3      	b.n	80087e6 <_malloc_r+0x1e>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	1b5b      	subs	r3, r3, r5
 8008822:	d417      	bmi.n	8008854 <_malloc_r+0x8c>
 8008824:	2b0b      	cmp	r3, #11
 8008826:	d903      	bls.n	8008830 <_malloc_r+0x68>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	441c      	add	r4, r3
 800882c:	6025      	str	r5, [r4, #0]
 800882e:	e004      	b.n	800883a <_malloc_r+0x72>
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	42a2      	cmp	r2, r4
 8008834:	bf0c      	ite	eq
 8008836:	600b      	streq	r3, [r1, #0]
 8008838:	6053      	strne	r3, [r2, #4]
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f85a 	bl	80088f4 <__malloc_unlock>
 8008840:	f104 000b 	add.w	r0, r4, #11
 8008844:	1d23      	adds	r3, r4, #4
 8008846:	f020 0007 	bic.w	r0, r0, #7
 800884a:	1ac2      	subs	r2, r0, r3
 800884c:	d0cc      	beq.n	80087e8 <_malloc_r+0x20>
 800884e:	1a1b      	subs	r3, r3, r0
 8008850:	50a3      	str	r3, [r4, r2]
 8008852:	e7c9      	b.n	80087e8 <_malloc_r+0x20>
 8008854:	4622      	mov	r2, r4
 8008856:	6864      	ldr	r4, [r4, #4]
 8008858:	e7cc      	b.n	80087f4 <_malloc_r+0x2c>
 800885a:	1cc4      	adds	r4, r0, #3
 800885c:	f024 0403 	bic.w	r4, r4, #3
 8008860:	42a0      	cmp	r0, r4
 8008862:	d0e3      	beq.n	800882c <_malloc_r+0x64>
 8008864:	1a21      	subs	r1, r4, r0
 8008866:	4630      	mov	r0, r6
 8008868:	f000 f82e 	bl	80088c8 <_sbrk_r>
 800886c:	3001      	adds	r0, #1
 800886e:	d1dd      	bne.n	800882c <_malloc_r+0x64>
 8008870:	e7cf      	b.n	8008812 <_malloc_r+0x4a>
 8008872:	bf00      	nop
 8008874:	200001e0 	.word	0x200001e0
 8008878:	200001e4 	.word	0x200001e4

0800887c <_realloc_r>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	4607      	mov	r7, r0
 8008880:	4614      	mov	r4, r2
 8008882:	460e      	mov	r6, r1
 8008884:	b921      	cbnz	r1, 8008890 <_realloc_r+0x14>
 8008886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800888a:	4611      	mov	r1, r2
 800888c:	f7ff bf9c 	b.w	80087c8 <_malloc_r>
 8008890:	b922      	cbnz	r2, 800889c <_realloc_r+0x20>
 8008892:	f7ff ff49 	bl	8008728 <_free_r>
 8008896:	4625      	mov	r5, r4
 8008898:	4628      	mov	r0, r5
 800889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889c:	f000 f830 	bl	8008900 <_malloc_usable_size_r>
 80088a0:	42a0      	cmp	r0, r4
 80088a2:	d20f      	bcs.n	80088c4 <_realloc_r+0x48>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4638      	mov	r0, r7
 80088a8:	f7ff ff8e 	bl	80087c8 <_malloc_r>
 80088ac:	4605      	mov	r5, r0
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d0f2      	beq.n	8008898 <_realloc_r+0x1c>
 80088b2:	4631      	mov	r1, r6
 80088b4:	4622      	mov	r2, r4
 80088b6:	f7ff ff0f 	bl	80086d8 <memcpy>
 80088ba:	4631      	mov	r1, r6
 80088bc:	4638      	mov	r0, r7
 80088be:	f7ff ff33 	bl	8008728 <_free_r>
 80088c2:	e7e9      	b.n	8008898 <_realloc_r+0x1c>
 80088c4:	4635      	mov	r5, r6
 80088c6:	e7e7      	b.n	8008898 <_realloc_r+0x1c>

080088c8 <_sbrk_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d06      	ldr	r5, [pc, #24]	; (80088e4 <_sbrk_r+0x1c>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7f8 ff80 	bl	80017d8 <_sbrk>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_sbrk_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_sbrk_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	200003ec 	.word	0x200003ec

080088e8 <__malloc_lock>:
 80088e8:	4801      	ldr	r0, [pc, #4]	; (80088f0 <__malloc_lock+0x8>)
 80088ea:	f7ff bef3 	b.w	80086d4 <__retarget_lock_acquire_recursive>
 80088ee:	bf00      	nop
 80088f0:	200003f4 	.word	0x200003f4

080088f4 <__malloc_unlock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__malloc_unlock+0x8>)
 80088f6:	f7ff beee 	b.w	80086d6 <__retarget_lock_release_recursive>
 80088fa:	bf00      	nop
 80088fc:	200003f4 	.word	0x200003f4

08008900 <_malloc_usable_size_r>:
 8008900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008904:	1f18      	subs	r0, r3, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfbc      	itt	lt
 800890a:	580b      	ldrlt	r3, [r1, r0]
 800890c:	18c0      	addlt	r0, r0, r3
 800890e:	4770      	bx	lr

08008910 <_init>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr

0800891c <_fini>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr
